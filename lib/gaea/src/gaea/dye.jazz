;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Gaea Dye
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.dye jazz


(import (jazz.graphic)
        (gaea.syntax (phase syntax)))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Dye
;;;


(definition public inline (dye red <fl> green <fl> blue <fl> alpha <fl>) <dye>
  (f32vector red green blue alpha))


(definition public inline (make-dye) <dye>
  (f32vector 0. 0. 0. 0.))


(definition public inline (dye? obj <object>) <bool>
  (f32vector? obj))


(definition public (copy-dye dye <dye>) <dye>
  (let ((copy (make-dye)))
    (dye-copy! copy dye)
    copy))


(definition public inline (dye-red dye <dye>) <fl>
  (f32vector-ref dye 0))

(definition public inline (dye-green dye <dye>) <fl>
  (f32vector-ref dye 1))

(definition public inline (dye-blue dye <dye>) <fl>
  (f32vector-ref dye 2))

(definition public inline (dye-alpha dye <dye>) <fl>
  (f32vector-ref dye 3))


(definition public inline (dye-red-set! dye <dye> red <fl>) <void>
  (f32vector-set! dye 0 red))

(definition public inline (dye-green-set! dye <dye> green <fl>) <void>
  (f32vector-set! dye 1 green))

(definition public inline (dye-blue-set! dye <dye> blue <fl>) <void>
  (f32vector-set! dye 2 blue))

(definition public inline (dye-alpha-set! dye <dye> alpha <fl>) <void>
  (f32vector-set! dye 3 alpha))


(definition public (dye=? c1 <dye> c2 <dye>) <bool>
  (and (= (dye-red c1) (dye-red c2))
       (= (dye-green c1) (dye-green c2))
       (= (dye-blue c1) (dye-blue c2))
       (= (dye-alpha c1) (dye-alpha c2))))


(definition public (dye! dye <dye> red <fl> green <fl> blue <fl> alpha <fl>) <void>
  (dye-red-set! dye red)
  (dye-green-set! dye green)
  (dye-blue-set! dye blue)
  (dye-alpha-set! dye alpha))


(definition public (dye-copy! dst <dye> src <dye>) <void>
  (dye-red-set! dst (dye-red src))
  (dye-green-set! dst (dye-green src))
  (dye-blue-set! dst (dye-blue src))
  (dye-alpha-set! dst (dye-alpha src)))


(definition public (color->dye color <Color>) <dye>
  (dye (get-red color)
       (get-green color)
       (get-blue color)
       (get-alpha color)))


(definition public (dye->color dye <dye>) <Color>
  (new Color
    red: (dye-red dye)
    green: (dye-green dye)
    blue: (dye-blue dye)
    alpha: (dye-alpha dye)))


(definition public (present-dye dye <dye>) <string>
  (format "~{Dye {r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}}"
          (dye-red dye)
          (dye-green dye)
          (dye-blue dye)
          (dye-alpha dye))))
