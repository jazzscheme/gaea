;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Engine
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.engine.opengl jazz


(import (jazz.platform)
        (jazz.version)
        (jazz.window)
        (gaea.opengl.glew)
        (gaea.opengl.render)
        (gaea.window))


(definition minimum-needed-version
  {Version 3 3})

(definition package (prepare-opengl-window window (need-version: need-version #f))
  (let ((needed-version (or need-version minimum-needed-version)))
    (let ((needed-major (get-major needed-version))
          (needed-minor (get-minor needed-version)))
      (define (needs-adjust?)
        (cond-expand
          (windows #t)
          (else (let ((major (glGetInteger GL_MAJOR_VERSION))
                      (minor (glGetInteger GL_MINOR_VERSION)))
                  (or (< major needed-major)
                      (and (= major needed-major)
                           (< minor needed-minor)))))))
      
      (define (validate-version)
        (let ((major (glGetInteger GL_MAJOR_VERSION))
              (minor (glGetInteger GL_MINOR_VERSION)))
          (when (or (< major needed-major)
                    (and (= major needed-major)
                         (< minor needed-minor)))
            (system-message (format "OpenGL {a}.{a} doesn't meet the OpenGL {a}.{a} requirements"
                                    major
                                    minor
                                    needed-major
                                    needed-minor)
                            type: 'error)
            (quit))))

      (with-render-mutex
        (lambda ()
          (setup-opengl-window window)
          (initialize-glew)
          (when (needs-adjust?)
            (adjust-opengl-context window needed-major needed-minor)
            (validate-version))
          ;; at the moment vsync is a really bad thing as it blocks
          ;; the thread scheduler by having control remain in C...
          (disable-vsync window)
          (with-context-current window
            (lambda ()
              (setup-engine window))))))))


;;;
;;;; GLEW
;;;


(cond-expand
  (windows
   (definition (init-glew)
     (glewInit)))
  (else
   (definition (init-glew)
     (glewExperimental)
     (prog1 (glewInit)
       ;; this is weird there is an error 1280 right after initing glew
       ;; as a quick hack call glGetError to flush error
       (glGetError)))))


(definition package initialize-glew
  (let ((initialized? #f))
    (lambda ()
      (unless initialized?
        (let ((success (init-glew)))
          (if (= success GLEW_OK)
              (set! initialized? #t)
            (error "Unable to initialize GLEW")))))))


;;;
;;;; VSync
;;;


;; needs more exploration but it seems that
;; vsync can have a huge performance impact
;; on windows but that on mac it is ok
(definition protected use-vsync?
  (cond-expand
    (mac #t)
    (else #f)))

(definition package (maybe-enable-vsync window)
  (when use-vsync?
    (enable-vsync window)))

(definition package (maybe-disable-vsync window)
  (when use-vsync?
    (disable-vsync window)))


;;;
;;;; Window
;;;


(hub get-device-size)


(definition package (opengl-resize-scene window width <fl> height <fl>)
  ;; quick try to solve wiggles on resizing window
  (cond-expand
    (windows
     (let ((device-size (platform-get-content-device-size (get-handle window))))
       (let ((device-width (get-width device-size))
             (device-height (get-height device-size))
             (surface-height (scale->device height (main-screen-scale-factor))))
         (let ((delta-heigth (- device-height surface-height)))
           (glViewport 0 delta-heigth device-width surface-height)))))
    (else
     (let ((device-size (get-device-size window)))
       (glViewport 0 0 (get-width device-size) (get-height device-size))))))


(definition package (opengl-setup)
  (glClearColor 0.0 0.0 0.0 1.0)
  (glClearDepth 1.0)
  (glEnable GL_LINE_SMOOTH)
  (glEnable GL_POLYGON_SMOOTH)
  (glEnable GL_DEPTH_TEST)
  (glDepthFunc GL_LEQUAL)
  (glPolygonMode GL_FRONT_AND_BACK GL_FILL))


(definition package (opengl-draw-scene)
  (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))))
