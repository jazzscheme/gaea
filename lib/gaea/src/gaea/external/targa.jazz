;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Targa Format
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.external.targa jazz


(import (jazz.io)
        (gaea.foreign)
        (gaea.opengl.glew))


(definition public (load-tga file (premultiply-alpha? #f))
  (define (unsupported-format)
    (error "Unsupported .tga format"))
  
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((size (input-port-byte-position port 0 2)))
        (input-port-byte-position port 0)
        (let ((content (make-u8vector size)))
          (read-subu8vector content 0 size port)
          (let ((tga-header (subu8vector content 0 12))
                (uncompressed-tga-header #u8(0 0 2 0 0 0 0 0 0 0 0 0)))
            (if (not (equal? tga-header uncompressed-tga-header))
                (unsupported-format)
              (let ((header (subu8vector content 12 18)))
                (let ((width  (+ (* (u8vector-ref header 1) 256) (u8vector-ref header 0)))
                      (height (+ (* (u8vector-ref header 3) 256) (u8vector-ref header 2)))
                      (depth  (u8vector-ref header 4)))
                  (let ((type (case depth
                                ((24) GL_RGB)
                                ((32) GL_RGBA))))
                    (if (not (equal? type GL_RGBA))
                        (unsupported-format)
                      (let ((bytes/pixel (/ depth 8)))
                        (let ((image-size (* width height bytes/pixel)))
                          (let ((image-data (BGRA-premultiply-alpha content 18 (+ 18 image-size) premultiply-alpha?)))
                            ;; hack around cairo_image_surface_create_for_data
                            ;; not taking ownership of the data
                            (make-will image-data
                              (lambda (image-data)
                                (BGRA-premultiply-alpha-free image-data)))
                            (values width height bytes/pixel image-data))))))))))))))))
