;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Generate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.generate jazz


(import (gaea.buffer)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.syntax (phase syntax)))


(definition public (generate-mesh program generator (matrix: matrix <matrix+> #f) (neighbors?: neighbors? #f) (instance?: instance? #f) (smooth-normals?: smooth-normals? #f) (material: material #f))
  (let ((triangles-count <fx+> #f)
        (content <f32vector+> #f)
        (neighbors <f32vector+> #f)
        (lightmap <f32vector+> #f)
        (n <fx> 0)
        (m <fx> 0)
        (smooth-normals (and smooth-normals? (make-table test: vertex=? hash: vertex-hash))))
    (define (setup triangles <fx> quads <fx>)
      (set! triangles-count (+ triangles (* quads 2)))
      (allege triangles-count
        (set! content (make-f32vector (* triangles-count triangle-floats)))
        (when neighbors?
          (set! neighbors (make-f32vector (* triangles-count triangle-neighbors-floats))))
        (set! lightmap (make-f32vector (* triangles-count triangle-lightmap-floats) 0.))))
    
    (define (add-triangle v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth)
      (let ((v1 (transform v1))
            (v2 (transform v2))
            (v3 (transform v3)))
        (add
          v1 n1 s1 t1 b1
          v2 n2 s2 t2 b2
          v3 n3 s3 t3 b3
          uv
          tdepth)))
    
    (define (add-quad v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> v4 <vertex> n4 s4 <fx> t4 <fx> b4 <fx> uv <f32vector> tdepth)
      (let ((v1 (transform v1))
            (v2 (transform v2))
            (v3 (transform v3))
            (v4 (transform v4)))
        (add
          v1 n1 s1 t1 b1
          v2 n2 s2 t2 b2
          v3 n3 s3 t3 b3
          uv
          tdepth)
        (add
          v3 n3 s3 t3 b3
          v4 n4 s4 t4 b4
          v1 n1 s1 t1 b1
          uv
          tdepth)))
    
    (define (transform vert <vertex>) <vertex>
      (matrix+-transform-3x4 matrix vert))
    
    (define (add v1 <vertex> n1 s1 <fx> t1 <fx> b1 <fx> v2 <vertex> n2 s2 <fx> t2 <fx> b2 <fx> v3 <vertex> n3 s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth)
      (let ((plane-normal #f))
        (define (get-plane-normal)
          (or plane-normal (let ((normal (plane-normal-safe v1 v2 v3)))
                             (set! plane-normal normal)
                             normal)))
        
        (let ((n1 (or n1 (get-plane-normal)))
              (n2 (or n2 (get-plane-normal)))
              (n3 (or n3 (get-plane-normal))))
          (when smooth-normals?
            (allege smooth-normals
              (let ((plane-normal (get-plane-normal)))
                (define (process-vertex vert)
                  (let ((vert (vertex-64->32 vert)))
                    (let ((smooth-normal (table-ref smooth-normals vert #f)))
                      (if (not smooth-normal)
                          (table-set! smooth-normals vert plane-normal)
                        (vertex-increase! smooth-normal plane-normal)))))
                
                (process-vertex v1)
                (process-vertex v2)
                (process-vertex v3))))
          (add-vertex v1) (add-normal n1) (add-texture s1 t1 uv tdepth) (add-bone b1) (when neighbors? (add-neighbors 0. v2 v3))
          (add-vertex v2) (add-normal n2) (add-texture s2 t2 uv tdepth) (add-bone b2) (when neighbors? (add-neighbors 1. v1 v3))
          (add-vertex v3) (add-normal n3) (add-texture s3 t3 uv tdepth) (add-bone b3) (when neighbors? (add-neighbors 2. v1 v2)))))
    
    (define (add-vertex vert)
      (allege content
        (f32vector-set! content n (vertex-x vert))
        (f32vector-set! content (+ n 1) (vertex-y vert))
        (f32vector-set! content (+ n 2) (vertex-z vert))
        (set! n (+ n 3))))
    
    (define (add-normal normal)
      (allege content
        (f32vector-set! content n (vertex-x normal))
        (f32vector-set! content (+ n 1) (vertex-y normal))
        (f32vector-set! content (+ n 2) (vertex-z normal))
        (set! n (+ n 3))))
    
    (define (add-texture s <fx> t <fx> uv <f32vector> tdepth)
      (allege content
        (f32vector-set! content n (f32vector-ref uv s))
        (f32vector-set! content (+ n 1) (f32vector-ref uv t))
        (f32vector-set! content (+ n 2) tdepth)
        (set! n (+ n 3))))
    
    (define (add-bone bone <fx>)
      (allege content
        (f32vector-set! content n (cast <fl> bone))
        (set! n (+ n 1))))
    
    (define (add-neighbors rank n1 n2)
      (allege neighbors
        (f32vector-set! neighbors m rank)
        (set! m (+ m 1))
        (f32vector-set! neighbors m (vertex-x n1))
        (f32vector-set! neighbors (+ m 1) (vertex-y n1))
        (f32vector-set! neighbors (+ m 2) (vertex-z n1))
        (set! m (+ m 3))
        (f32vector-set! neighbors m (vertex-x n2))
        (f32vector-set! neighbors (+ m 1) (vertex-y n2))
        (f32vector-set! neighbors (+ m 2) (vertex-z n2))
        (set! m (+ m 3))))
    
    (generator setup add-triangle add-quad)
    (when smooth-normals?
      (allege smooth-normals
        (iterate-table smooth-normals
          (lambda (vert smooth-normal)
            (vertex-normalize-onsite! smooth-normal smooth-normal)))
        (loop (for i from 0 below (allege triangles-count))
              (let ((n (* i triangle-floats)))
                (define (smooth-vertex offset <fx>)
                  (allege content
                    (let ((vert (vertex (f32vector-ref content offset) (f32vector-ref content (+ offset 1)) (f32vector-ref content (+ offset 2)))))
                      (let ((smooth-normal (table-ref smooth-normals vert)))
                        (f32vector-set! content (+ offset 3) (vertex-x smooth-normal))
                        (f32vector-set! content (+ offset 4) (vertex-y smooth-normal))
                        (f32vector-set! content (+ offset 5) (vertex-z smooth-normal))))))
                
                (smooth-vertex n)
                (smooth-vertex (+ n vertex-floats))
                (smooth-vertex (+ n (* vertex-floats 2)))))))
    (let ((mesh (new Vertex-Mesh material: material)))
      (allocate-vertices mesh)
      (set-data (get-vertices-buffer mesh) content (f32vector-length (allege content)) vertex-floats)
      (when neighbors?
        (allocate-neighbors mesh)
        (set-data (get-neighbors-buffer mesh) neighbors (f32vector-length (allege neighbors)) neighbors-floats))
      (allocate-lightmap mesh)
      (set-data (get-lightmap-buffer mesh) lightmap (f32vector-length (allege lightmap)) lightmap-floats)
      @convert
      (when instance?
        (allocate-instance mesh)
        (let ((data (make-f32vector (* 19683 instance-floats))))
          (set-stream-data (get-instance-buffer mesh) data (f32vector-length data) instance-floats)))
      (setup-array mesh program)
      mesh))))
