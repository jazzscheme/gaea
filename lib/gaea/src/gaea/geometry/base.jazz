;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Gaea Geometry Base
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.geometry.base jazz


(import (gaea.geometry.classes)
        (gaea.geometry.syntax (phase syntax))
        (gaea.homogeneous))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Float
;;;


(definition protected inline EPSILON <fl>
  1e-5)


(definition public inline (float-near? f1 <fv> f2 <fv>) <bool>
  (< (abs (- f1 f2)) EPSILON))


;;;
;;;; Vertex
;;;


(definition public inline (vertex+ v1 <vertex> v2 <vertex>) <vertex>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex+! res <vertex> v1 <vertex> v2 <vertex>) <vertex>
  (vertex-x-set! res (+ (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (+ (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (+ (vertex-z v1) (vertex-z v2)))
  res)


(definition public inline (vertex-increase! res <vertex> v <vertex>) <void>
  (vertex-x-set! res (+ (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (+ (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (+ (vertex-z res) (vertex-z v))))


(definition public inline (vertex+xyz v <vertex> x <fl> y <fl> z <fl>) <vertex>
  (vertex
    (+ (vertex-x v) x)
    (+ (vertex-y v) y)
    (+ (vertex-z v) z)))


(definition public inline (vertex+xyz! res <vertex> v <vertex> x <fl> y <fl> z <fl>) <vertex>
  (vertex! res
           (+ (vertex-x v) x)
           (+ (vertex-y v) y)
           (+ (vertex-z v) z)))


(definition public inline (vertex- v1 <vertex> v2 <vertex>) <vertex>
  (vertex
    (- (vertex-x v1) (vertex-x v2))
    (- (vertex-y v1) (vertex-y v2))
    (- (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex-! res <vertex> v1 <vertex> v2 <vertex>) <vertex>
  (vertex-x-set! res (- (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (- (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (- (vertex-z v1) (vertex-z v2)))
  res)


(definition public inline (vertex-decrease! res <vertex> v <vertex>) <void>
  (vertex-x-set! res (- (vertex-x res) (vertex-x v)))
  (vertex-y-set! res (- (vertex-y res) (vertex-y v)))
  (vertex-z-set! res (- (vertex-z res) (vertex-z v))))


(definition public inline (vertex-negate v <vertex>) <vertex>
  (vertex
    (- (vertex-x v))
    (- (vertex-y v))
    (- (vertex-z v))))


(definition public inline (vertex-negate! res <vertex> v <vertex>) <vertex>
  (vertex-x-set! res (- (vertex-x v)))
  (vertex-y-set! res (- (vertex-y v)))
  (vertex-z-set! res (- (vertex-z v)))
  res)


(definition public inline (vertex* v1 <vertex> v2 <vertex>) <vertex>
  (vertex
    (* (vertex-x v1) (vertex-x v2))
    (* (vertex-y v1) (vertex-y v2))
    (* (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex*! res <vertex> v1 <vertex> v2 <vertex>) <vertex>
  (vertex-x-set! res (* (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (* (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (* (vertex-z v1) (vertex-z v2)))
  res)


(definition public inline (vertex/ v1 <vertex> v2 <vertex>) <vertex>
  (vertex
    (/ (vertex-x v1) (vertex-x v2))
    (/ (vertex-y v1) (vertex-y v2))
    (/ (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex/! res <vertex> v1 <vertex> v2 <vertex>) <vertex>
  (vertex-x-set! res (/ (vertex-x v1) (vertex-x v2)))
  (vertex-y-set! res (/ (vertex-y v1) (vertex-y v2)))
  (vertex-z-set! res (/ (vertex-z v1) (vertex-z v2)))
  res)


(definition public inline (vertex-inverse v <vertex>) <vertex>
  (vertex
    (/ (vertex-x v))
    (/ (vertex-y v))
    (/ (vertex-z v))))


(definition public inline (vertex-inverse! res <vertex> v <vertex>) <vertex>
  (vertex-x-set! res (/ (vertex-x v)))
  (vertex-y-set! res (/ (vertex-y v)))
  (vertex-z-set! res (/ (vertex-z v)))
  res)


(definition public inline (vertex-scalar* v <vertex> r <fv>) <vertex>
  (vertex
    (* r (vertex-x v))
    (* r (vertex-y v))
    (* r (vertex-z v))))


(definition public inline (vertex-scalar*! res <vertex> v <vertex> r <fv>) <vertex>
  (vertex-x-set! res (* r (vertex-x v)))
  (vertex-y-set! res (* r (vertex-y v)))
  (vertex-z-set! res (* r (vertex-z v)))
  res)


(definition public inline (vertex-scalar/ v <vertex> r <fv>) <vertex>
  (vertex
    (/ (vertex-x v) r)
    (/ (vertex-y v) r)
    (/ (vertex-z v) r)))


(definition public inline (vertex-scalar/! res <vertex> v <vertex> r <fv>) <vertex>
  (vertex-x-set! res (/ (vertex-x v) r))
  (vertex-y-set! res (/ (vertex-y v) r))
  (vertex-z-set! res (/ (vertex-z v) r))
  res)


(definition public inline (vertex-norm v <vertex>) <fl>
  (let ((x (vertex-x v))
        (y (vertex-y v))
        (z (vertex-z v)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition public inline (vertex-norm! res <f64> v <vertex>) <f64>
  (f64-set! res (let ((x (vertex-x v))
                      (y (vertex-y v))
                      (z (vertex-z v)))
                  (sqrt (+ (* x x)
                           (* y y)
                           (* z z)))))
  res)


(definition public inline (vertex-abs v <vertex>) <vertex>
  (vertex (abs (vertex-x v))
          (abs (vertex-y v))
          (abs (vertex-z v))))


(definition public inline (vertex-abs! res <vertex> v <vertex>) <vertex>
  (vertex! res
           (abs (vertex-x v))
           (abs (vertex-y v))
           (abs (vertex-z v)))
  res)


(definition public inline (vertex-normalize v <vertex>) <vertex>
  (vertex-scalar* v (f64^ (/ (vertex-norm^ v)))))


(definition public inline (vertex-normalize! res <vertex> v <vertex>) <vertex>
  (vertex-scalar*! res v (f64^ (/ (vertex-norm^ v)))))


;; hack around an unsafe warning in generate-mesh that I do not understand
(definition public (vertex-normalize-onsite! res <vertex> v <vertex>) <vertex>
  (vertex-scalar*! res v (f64^ (/ (vertex-norm^ v)))))


(definition public inline (vertex-normalize-safe v <vertex>) <vertex>
  (let ((norm (vertex-norm^ v)))
    (if (= norm 0.)
        v
      (vertex-scalar* v (/ norm)))))


(definition public inline (vertex-normalize-safe! res <vertex> v <vertex>) <vertex>
  (let ((norm (vertex-norm^ v)))
    (if (= norm 0.)
        (vertex-copy! res v)
      (vertex-scalar*! res v (f64^ (/ norm)))))
  res)


(definition public inline (vertex-max v <vertex>) <fl>
  (max (vertex-x v)
       (vertex-y v)
       (vertex-z v)))


(definition public inline (vertex-lerp! res <vertex> p <vertex> q <vertex> t <fv>) <vertex>
  (vertex+! res (vertex-scalar*^ p (f64^ (- 1. t))) (vertex-scalar*^ q t))
  res)


(definition public inline (vertex-lerp p <vertex> q <vertex> t <fv>) <vertex>
  (vertex-lerp! (make-vertex) p q t))


(definition public (validate-vertex-normalized vert)
  (unless (float-near? (vertex-norm^ vert) 1.)
    (error "Vertex {s} is not normalized" vert))))
