;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Gaea Geometry Classes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.geometry.classes jazz


(import (gaea.geometry.syntax (phase syntax))
        (gaea.syntax (phase syntax)))


(proclaim (warn optimizations))

(declare (optimize-dead-local-variables))


;;;
;;;; Vertex
;;;


(definition public inline (vertex? obj)
  (f64vector? obj))


(definition public inline (vertex x <fl> y <fl> z <fl>) <vertex>
  (f64vector (assert-finite x)
             (assert-finite y)
             (assert-finite z)))


(definition public inline (make-vertex) <vertex>
  (allocate-vertex))


(definition public inline (make-zero-vertex) <vertex>
  (vertex 0. 0. 0.))


(definition public inline (make-nan-vertex) <vertex>
  (f64vector +nan.0 +nan.0 +nan.0))


(definition public (copy-vertex vert <vertex>) <vertex>
  (let ((copy (make-vertex)))
    (vertex-copy! copy vert)
    copy))


;; clone doesn't validate content
(definition public (clone-vertex vert <vertex>) <vertex>
  (let ((clone (make-vertex)))
    (f64vector-set! clone 0 (f64vector-ref vert 0))
    (f64vector-set! clone 1 (f64vector-ref vert 1))
    (f64vector-set! clone 2 (f64vector-ref vert 2))
    clone))


(definition public inline (vertex-x vert <vertex>) <fl>
  (assert-finite (f64vector-ref vert 0)))

(definition public inline (vertex-y vert <vertex>) <fl>
  (assert-finite (f64vector-ref vert 1)))

(definition public inline (vertex-z vert <vertex>) <fl>
  (assert-finite (f64vector-ref vert 2)))


(definition public inline (vertex-x-set! vert <vertex> x <fl>) <void>
  (f64vector-set! vert 0 (assert-finite x)))

(definition public inline (vertex-y-set! vert <vertex> y <fl>) <void>
  (f64vector-set! vert 1 (assert-finite y)))

(definition public inline (vertex-z-set! vert <vertex> z <fl>) <void>
  (f64vector-set! vert 2 (assert-finite z)))


(definition public inline (vertex=? v1 <vertex> v2 <vertex>) <bool>
  (and (= (vertex-x v1) (vertex-x v2))
       (= (vertex-y v1) (vertex-y v2))
       (= (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex/=? v1 <vertex> v2 <vertex>) <bool>
  (or (/= (vertex-x v1) (vertex-x v2))
      (/= (vertex-y v1) (vertex-y v2))
      (/= (vertex-z v1) (vertex-z v2))))


(definition public inline (vertex-zero? vert <vertex>) <bool>
  (and (= (vertex-x vert) 0.)
       (= (vertex-y vert) 0.)
       (= (vertex-z vert) 0.)))


(definition public inline (vertex-zero! vert <vertex>) <vertex>
  (vertex-x-set! vert 0.)
  (vertex-y-set! vert 0.)
  (vertex-z-set! vert 0.)
  vert)


(definition public inline (vertex-xz-zero? vert <vertex>) <bool>
  (and (= (vertex-x vert) 0.)
       (= (vertex-z vert) 0.)))


(definition public inline (vertex! vert <vertex> x <fl> y <fl> z <fl>) <vertex>
  (vertex-x-set! vert x)
  (vertex-y-set! vert y)
  (vertex-z-set! vert z)
  vert)


(definition public inline (vertex-copy! dst <vertex> src <vertex>) <vertex>
  (vertex-x-set! dst (vertex-x src))
  (vertex-y-set! dst (vertex-y src))
  (vertex-z-set! dst (vertex-z src))
  dst)


(definition public (vertex-hash vert <vertex>)
  (fxwrap+ (eqv?-hash (vertex-x vert))
           (eqv?-hash (vertex-y vert))
           (eqv?-hash (vertex-z vert))))


(definition public (present-vertex vert)
  (format "~{Vertex {r precision: 3} {r precision: 3} {r precision: 3}}"
          (vertex-x vert)
          (vertex-y vert)
          (vertex-z vert)))


(definition public (present-vertex-code vert)
  (format "(vertex {r precision: 3} {r precision: 3} {r precision: 3})"
          (vertex-x vert)
          (vertex-y vert)
          (vertex-z vert)))


(definition public (present-xyz vert)
  (format "{r precision: 3} {r precision: 3} {r precision: 3}"
          (vertex-x vert)
          (vertex-y vert)
          (vertex-z vert)))


(definition public (present-block vert)
  (format "{r precision: 1} {r precision: 1} {r precision: 1}"
          (vertex-x vert)
          (vertex-y vert)
          (vertex-z vert)))


;;;
;;;; Quaternion
;;;


(definition public inline (quaternion x <fl> y <fl> z <fl> w <fl>) <quaternion>
  (f64vector x y z w))


(definition public inline (make-quaternion) <quaternion>
  (f64vector 0. 0. 0. 0.))


(definition public inline (quaternion-x quat <quaternion>) <fl>
  (f64vector-ref quat 0))

(definition public inline (quaternion-y quat <quaternion>) <fl>
  (f64vector-ref quat 1))

(definition public inline (quaternion-z quat <quaternion>) <fl>
  (f64vector-ref quat 2))

(definition public inline (quaternion-w quat <quaternion>) <fl>
  (f64vector-ref quat 3))


(definition public inline (quaternion-x-set! quat <quaternion> x <fl>) <void>
  (f64vector-set! quat 0 x))

(definition public inline (quaternion-y-set! quat <quaternion> y <fl>) <void>
  (f64vector-set! quat 1 y))

(definition public inline (quaternion-z-set! quat <quaternion> z <fl>) <void>
  (f64vector-set! quat 2 z))

(definition public inline (quaternion-w-set! quat <quaternion> w <fl>) <void>
  (f64vector-set! quat 3 w))


(definition public (quaternion! quat <quaternion> x <fl> y <fl> z <fl> w <fl>) <quaternion>
  (quaternion-x-set! quat x)
  (quaternion-y-set! quat y)
  (quaternion-z-set! quat z)
  (quaternion-w-set! quat w)
  quat)


(definition public (quaternion-copy! dst <quaternion> src <quaternion>) <quaternion>
  (quaternion-x-set! dst (quaternion-x src))
  (quaternion-y-set! dst (quaternion-y src))
  (quaternion-z-set! dst (quaternion-z src))
  (quaternion-w-set! dst (quaternion-w src))
  dst)


(definition public (present-quaternion quat)
  (format "~{Quaternion {r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}}"
          (quaternion-x quat)
          (quaternion-y quat)
          (quaternion-z quat)
          (quaternion-w quat)))


;;;
;;;; Cuboid
;;;


(definition public inline (cuboid left <fl> bottom <fl> back <fl> right <fl> top <fl> front <fl>) <cuboid>
  (f64vector left bottom back right top front))


(definition public inline (make-cuboid) <cuboid>
  (f64vector 0. 0. 0. 0. 0. 0.))


(definition public (copy-cuboid cub <cuboid>) <cuboid>
  (let ((copy (make-cuboid)))
    (cuboid-copy! copy cub)
    copy))


(definition public inline (cuboid-left cub <cuboid>) <fl>
  (f64vector-ref cub 0))

(definition public inline (cuboid-bottom cub <cuboid>) <fl>
  (f64vector-ref cub 1))

(definition public inline (cuboid-back cub <cuboid>) <fl>
  (f64vector-ref cub 2))

(definition public inline (cuboid-right cub <cuboid>) <fl>
  (f64vector-ref cub 3))

(definition public inline (cuboid-top cub <cuboid>) <fl>
  (f64vector-ref cub 4))

(definition public inline (cuboid-front cub <cuboid>) <fl>
  (f64vector-ref cub 5))


(definition public (cuboid-width cub <cuboid>) <fl>
  (- (cuboid-right cub)
     (cuboid-left cub)))


(definition public (cuboid-height cub <cuboid>) <fl>
  (- (cuboid-top cub)
     (cuboid-bottom cub)))


(definition public (cuboid-depth cub <cuboid>) <fl>
  (- (cuboid-front cub)
     (cuboid-back cub)))


(definition public (cuboid-position cub <cuboid>) <vertex>
  (vertex (cuboid-left cub)
          (cuboid-bottom cub)
          (cuboid-back cub)))


(definition public inline (cuboid-left-set! cub <cuboid> left <fl>) <void>
  (f64vector-set! cub 0 left))

(definition public inline (cuboid-bottom-set! cub <cuboid> bottom <fl>) <void>
  (f64vector-set! cub 1 bottom))

(definition public inline (cuboid-back-set! cub <cuboid> back <fl>) <void>
  (f64vector-set! cub 2 back))

(definition public inline (cuboid-right-set! cub <cuboid> right <fl>) <void>
  (f64vector-set! cub 3 right))

(definition public inline (cuboid-top-set! cub <cuboid> top <fl>) <void>
  (f64vector-set! cub 4 top))

(definition public inline (cuboid-front-set! cub <cuboid> front <fl>) <void>
  (f64vector-set! cub 5 front))


(definition public (cuboid! cub <cuboid> left <fl> bottom <fl> back <fl> right <fl> top <fl> front <fl>) <cuboid>
  (cuboid-left-set! cub left)
  (cuboid-bottom-set! cub bottom)
  (cuboid-back-set! cub back)
  (cuboid-right-set! cub right)
  (cuboid-top-set! cub top)
  (cuboid-front-set! cub front)
  cub)


(definition public (cuboid-copy! dst <cuboid> src <cuboid>) <cuboid>
  (cuboid-left-set! dst (cuboid-left src))
  (cuboid-bottom-set! dst (cuboid-bottom src))
  (cuboid-back-set! dst (cuboid-back src))
  (cuboid-right-set! dst (cuboid-right src))
  (cuboid-top-set! dst (cuboid-top src))
  (cuboid-front-set! dst (cuboid-front src))
  dst)


(definition public (cuboid-scalar* cub <cuboid> scales <vertex>) <cuboid>
  (cuboid-scalar*! (make-cuboid) cub scales))


(definition public (cuboid-scalar*! res <cuboid> cub <cuboid> scales <vertex>) <cuboid>
  (let ((sx (vertex-x scales))
        (sy (vertex-y scales))
        (sz (vertex-z scales)))
    (cuboid-left-set! res (* sx (cuboid-left cub)))
    (cuboid-bottom-set! res (* sy (cuboid-bottom cub)))
    (cuboid-back-set! res (* sz (cuboid-back cub)))
    (cuboid-right-set! res (* sx (cuboid-right cub)))
    (cuboid-top-set! res (* sy (cuboid-top cub)))
    (cuboid-front-set! res (* sz (cuboid-front cub)))
    res))


(definition public (translate-cuboid cub <cuboid> t <vertex>) <cuboid>
  (let ((tx (vertex-x t))
        (ty (vertex-y t))
        (tz (vertex-z t)))
    (cuboid
      (+ (cuboid-left cub) tx)
      (+ (cuboid-bottom cub) ty)
      (+ (cuboid-back cub) tz)
      (+ (cuboid-right cub) tx)
      (+ (cuboid-top cub) ty)
      (+ (cuboid-front cub) tz))))


(definition public (scale-cuboid cub <cuboid> s <vertex>) <cuboid>
  (let ((sx (vertex-x s))
        (sy (vertex-y s))
        (sz (vertex-z s)))
    (cuboid
      (* (cuboid-left cub) sx)
      (* (cuboid-bottom cub) sy)
      (* (cuboid-back cub) sz)
      (* (cuboid-right cub) sx)
      (* (cuboid-top cub) sy)
      (* (cuboid-front cub) sz))))


(definition public (cuboid-union x <cuboid> y <cuboid>) <cuboid>
  (cuboid
    (min (cuboid-left x) (cuboid-left y))
    (min (cuboid-bottom x) (cuboid-bottom y))
    (min (cuboid-back x) (cuboid-back y))
    (max (cuboid-right x) (cuboid-right y))
    (max (cuboid-top x) (cuboid-top y))
    (max (cuboid-front x) (cuboid-front y))))


;;;
;;;; Matrix
;;;


;; 0  4  8 12
;; 1  5  9 13
;; 2  6 10 14
;; 3  7 11 15


(definition public (matrix f0 <fl> f4 <fl> f8 <fl> f12 <fl> f1 <fl> f5 <fl> f9 <fl> f13 <fl> f2 <fl> f6 <fl> f10 <fl> f14 <fl> f3 <fl> f7 <fl> f11 <fl> f15 <fl>) <matrix>
  (f64vector f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15))


(definition public (make-matrix) <matrix>
  (f64vector 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.))


(definition public (copy-matrix mat <matrix>) <matrix>
  (let ((copy (make-matrix)))
    (matrix-copy! copy mat)
    copy))


(definition public (matrix=? m1 <matrix> m2 <matrix>) <bool>
  (and (= (matrix-ref m1  0) (matrix-ref m2  0))
       (= (matrix-ref m1  1) (matrix-ref m2  1))
       (= (matrix-ref m1  2) (matrix-ref m2  2))
       (= (matrix-ref m1  3) (matrix-ref m2  3))
       (= (matrix-ref m1  4) (matrix-ref m2  4))
       (= (matrix-ref m1  5) (matrix-ref m2  5))
       (= (matrix-ref m1  6) (matrix-ref m2  6))
       (= (matrix-ref m1  7) (matrix-ref m2  7))
       (= (matrix-ref m1  8) (matrix-ref m2  8))
       (= (matrix-ref m1  9) (matrix-ref m2  9))
       (= (matrix-ref m1 10) (matrix-ref m2 10))
       (= (matrix-ref m1 11) (matrix-ref m2 11))
       (= (matrix-ref m1 12) (matrix-ref m2 12))
       (= (matrix-ref m1 13) (matrix-ref m2 13))
       (= (matrix-ref m1 14) (matrix-ref m2 14))
       (= (matrix-ref m1 15) (matrix-ref m2 15))))


(definition public (matrix-copy! dst <matrix> src <matrix>) <matrix>
  (matrix-set! dst  0 (matrix-ref src 0))
  (matrix-set! dst  1 (matrix-ref src 1))
  (matrix-set! dst  2 (matrix-ref src 2))
  (matrix-set! dst  3 (matrix-ref src 3))
  (matrix-set! dst  4 (matrix-ref src 4))
  (matrix-set! dst  5 (matrix-ref src 5))
  (matrix-set! dst  6 (matrix-ref src 6))
  (matrix-set! dst  7 (matrix-ref src 7))
  (matrix-set! dst  8 (matrix-ref src 8))
  (matrix-set! dst  9 (matrix-ref src 9))
  (matrix-set! dst 10 (matrix-ref src 10))
  (matrix-set! dst 11 (matrix-ref src 11))
  (matrix-set! dst 12 (matrix-ref src 12))
  (matrix-set! dst 13 (matrix-ref src 13))
  (matrix-set! dst 14 (matrix-ref src 14))
  (matrix-set! dst 15 (matrix-ref src 15))
  dst)


(definition public (debug-matrix mat (dest :console))
  (format dest "{r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}{%}" (matrix-ref mat 0) (matrix-ref mat 4) (matrix-ref mat 8) (matrix-ref mat 12))
  (format dest "{r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}{%}" (matrix-ref mat 1) (matrix-ref mat 5) (matrix-ref mat 9) (matrix-ref mat 13))
  (format dest "{r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}{%}" (matrix-ref mat 2) (matrix-ref mat 6) (matrix-ref mat 10) (matrix-ref mat 14))
  (format dest "{r precision: 3} {r precision: 3} {r precision: 3} {r precision: 3}{%}" (matrix-ref mat 3) (matrix-ref mat 7) (matrix-ref mat 11) (matrix-ref mat 15))))
