;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Gaea Geometry Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.geometry.syntax jazz


;;;
;;;; FX
;;;


(syntax public make-fx&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-fx))
      form-src)))


(syntax public fx&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(fx! (make-fx&) ,@rest)
        form-src))))


;;;
;;;; FL
;;;


(syntax public make-fl&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (flalloc))
      form-src)))


(syntax public make-fl^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <fl>)
      form-src)))


(syntax public fl&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(fl! (make-fl&) ,@rest)
        form-src))))


(syntax public fl^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(fl! (make-fl^) ,@rest)
        form-src))))


;;;
;;;; F32
;;;


(syntax public make-f32&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-f32))
      form-src)))


(syntax public f32&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(f32! (make-f32&) ,@rest)
        form-src))))


;;;
;;;; F64
;;;


(syntax public make-f64&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-f64))
      form-src)))


(syntax public make-f64^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <f64>)
      form-src)))


(syntax public f64&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(f64! (make-f64&) ,@rest)
        form-src))))


;;;
;;;; Box
;;;


(syntax public make-box&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (box #f))
      form-src)))


(syntax public box&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(box! (make-box&) ,@rest)
        form-src))))


;;;
;;;; Values
;;;


(syntax public values&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        (let ((len (length rest))
              (values (generate-symbol "values")))
          `(let ((,values (static (values ,@(make-list len #f)))))
             ,@(map (lambda (expr rank)
                      `(values-set! ,values ,rank ,expr))
                    rest
                    (naturals 0 len))
             ,values))
        form-src))))


;;;
;;;; Environment
;;;


(syntax public wrap&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        (let ((len (length rest))
              (env (generate-symbol "env")))
          `(let ((,env (static (vector ,@(make-list len #f)))))
             ,@(map (lambda (expr rank)
                      `(vector-set! ,env ,rank ,expr))
                    rest
                    (naturals 0 len))
             ,env))
        form-src))))


(syntax public unwrap
  (lambda (form-src usage-environment macro-environment)
    (let ((bindings (source-code (cadr (source-code form-src))))
          (env (car (cddr (source-code form-src))))
          (body (cdr (cddr (source-code form-src)))))
      (define (parse-bindings)
        (let (iter (scan bindings) (bindings '()))
          (if (null? scan)
              (reverse bindings)
            (let ((specifier (binding-specifier scan)))
              (if specifier
                  (iter (cddr scan) (cons (cons (car scan) specifier) bindings))
                (iter (cdr scan) (cons (cons (car scan) #f) bindings)))))))
      
      (sourcify-deep-if
        (let ((bindings (parse-bindings)))
          `(let ((,env <vector> ,env))
             (let ,(map (lambda (binding rank)
                          (bind (variable . type) binding
                            `(,variable ,@(if type (list type) '()) (vector-ref ,env ,rank))))
                        bindings
                        (naturals 0 (length bindings)))
               ,@body)))
        form-src))))


;;;
;;;; Index
;;;


(syntax public make-index&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-index))
      form-src)))


(syntax public indexed&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(index! (make-index&) ,@rest)
        form-src))))


(syntax public make-planar-index&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-planar-index))
      form-src)))


(syntax public planar-index&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(planar-index! (make-planar-index&) ,@rest)
        form-src))))


(syntax public section->chunk-index&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(section->chunk-index! (make-planar-index&) ,@rest)
        form-src))))


;;;
;;;; Vertex
;;;


(syntax public make-vertex&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-vertex))
      form-src)))


(syntax public make-vertex^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <vertex>)
      form-src)))


(syntax public vertex&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-copy! (make-vertex&) ,@rest)
        form-src))))


(syntax public vertex-copy^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-copy! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex+^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex+! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex+xyz^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex+xyz! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-negate^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-negate! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex*^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex*! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex/^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex/! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-inverse^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-inverse! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-scalar*^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-scalar*! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-scalar/^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-scalar/! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-norm^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-norm! (make-f64^) ,@rest)
        form-src))))


(syntax public vertex-normalize^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-normalize! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-normalize-safe^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-normalize-safe! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-abs^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-abs! (make-vertex^) ,@rest)
        form-src))))


(syntax public vertex-distance^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(vertex-distance! (make-f64^) ,@rest)
        form-src))))


(syntax public rotate-vertex-upon^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-vertex-upon! (make-vertex^) ,@rest)
        form-src))))


(syntax public dot-product&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(dot-product! (make-f64&) ,@rest)
        form-src))))


(syntax public dot-product^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(dot-product! (make-f64^) ,@rest)
        form-src))))


(syntax public cross-product^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(cross-product! (make-vertex^) ,@rest)
        form-src))))


(syntax public cross-normal^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(cross-normal! (make-vertex^) ,@rest)
        form-src))))


(syntax public cross-normal-safe^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(cross-normal-safe! (make-vertex^) ,@rest)
        form-src))))


(syntax public plane-normal^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(plane-normal! (make-vertex^) ,@rest)
        form-src))))


(syntax public polygon-normal^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(polygon-normal! (make-vertex^) ,@rest)
        form-src))))


(syntax public polygon-radius^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(polygon-radius! (make-f64^) ,@rest)
        form-src))))


(syntax public center-of-mass^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(center-of-mass! (make-vertex^) ,@rest)
        form-src))))


(syntax public roll-free-up^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(roll-free-up! (make-vertex^) ,@rest)
        form-src))))


(syntax public pop-vertex&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(pop-vertex! (make-vertex&) ,@rest)
        form-src))))


(syntax public pop-vertex^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(pop-vertex! (make-vertex^) ,@rest)
        form-src))))


;;;
;;;; LookAt
;;;


(syntax public make-lookat&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-lookat))
      form-src)))


(syntax public make-lookat^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <LookAt> LookAt (make-vertex^) (make-vertex^) (make-vertex^))
      form-src)))


(syntax public lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(lookat! (make-lookat^) ,@rest)
        form-src))))


(syntax public lookat-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(lookat-copy! (make-lookat&) ,@rest)
        form-src))))


(syntax public lookat-copy^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(lookat-copy! (make-lookat^) ,@rest)
        form-src))))


(syntax public direction-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(direction-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public direction-lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(direction-lookat! (make-lookat^) ,@rest)
        form-src))))


(syntax public horizon-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(horizon-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public horizon-lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(horizon-lookat! (make-lookat^) ,@rest)
        form-src))))


(syntax public realign-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(realign-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public realign-lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(realign-lookat! (make-lookat^) ,@rest)
        form-src))))


(syntax public realign-lookat-horizon&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(realign-lookat-horizon! (make-lookat&) ,@rest)
        form-src))))


(syntax public realign-lookat-horizon^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(realign-lookat-horizon! (make-lookat^) ,@rest)
        form-src))))


(syntax public rotate-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public rotate-lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat! (make-lookat^) ,@rest)
        form-src))))


(syntax public rotate-lookat-vertical&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat-vertical! (make-lookat&) ,@rest)
        form-src))))


(syntax public rotate-lookat-vertical^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat-vertical! (make-lookat^) ,@rest)
        form-src))))


(syntax public rotate-lookat-vertical-up&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat-vertical-up! (make-lookat&) ,@rest)
        form-src))))


(syntax public rotate-lookat-vertical-up^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(rotate-lookat-vertical-up! (make-lookat^) ,@rest)
        form-src))))


(syntax public pop-lookat&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(pop-lookat! (make-lookat&) ,@rest)
        form-src))))


(syntax public pop-lookat^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(pop-lookat! (make-lookat^) ,@rest)
        form-src))))


;;;
;;;; Quaternion
;;;


(syntax public make-quaternion&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-quaternion))
      form-src)))


(syntax public make-quaternion^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <quaternion>)
      form-src)))


(syntax public quaternion&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(quaternion! (make-quaternion&) ,@rest)
        form-src))))


(syntax public quaternion^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(quaternion! (make-quaternion^) ,@rest)
        form-src))))


(syntax public quaternion-copy&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(quaternion-copy! (make-quaternion&) ,@rest)
        form-src))))


(syntax public quaternion-copy^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(quaternion-copy! (make-quaternion^) ,@rest)
        form-src))))


;;;
;;;; Cuboid
;;;


(syntax public make-cuboid&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-cuboid))
      form-src)))


(syntax public make-cuboid^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <cuboid>)
      form-src)))


;;;
;;;; Matrix
;;;


(syntax public matrix-ref
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(f64vector-ref ,@rest)
        form-src))))


(syntax public matrix-set!
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(f64vector-set! ,@rest)
        form-src))))


(syntax public make-matrix&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-matrix))
      form-src)))


(syntax public make-matrix^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <matrix>)
      form-src)))


(syntax public make-identity-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-identity-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-identity-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-identity-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public matrix-multiply&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-multiply! (make-matrix&) ,@rest)
        form-src))))


(syntax public matrix-multiply^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-multiply! (make-matrix^) ,@rest)
        form-src))))


(syntax public matrix-multiply*&
  (lambda (form-src usage-environment macro-environment)
    (let ((matrices (cadr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-multiply*! (make-matrix&) ,matrices)
        form-src))))


(syntax public matrix-multiply*^
  (lambda (form-src usage-environment macro-environment)
    (let ((matrices (cadr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-multiply*! (make-matrix^) ,matrices)
        form-src))))


(syntax public matrix-transform&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform! (make-vertex&) ,@rest)
        form-src))))


(syntax public matrix-transform^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform! (make-vertex^) ,@rest)
        form-src))))


(syntax public matrix-transform-3x4&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform-3x4! (make-vertex&) ,@rest)
        form-src))))


(syntax public matrix-transform-3x4^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform-3x4! (make-vertex^) ,@rest)
        form-src))))


(syntax public matrix+-transform-3x4&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix+-transform-3x4! (make-vertex&) ,@rest)
        form-src))))


(syntax public matrix+-transform-3x4^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix+-transform-3x4! (make-vertex^) ,@rest)
        form-src))))


(syntax public matrix-transform-normal&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform-normal! (make-vertex&) ,@rest)
        form-src))))


(syntax public matrix-transform-normal^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(matrix-transform-normal! (make-vertex^) ,@rest)
        form-src))))


(syntax public make-translation-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-translation-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-translation-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-translation-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-rotation-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-rotation-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-x-rotation-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-x-rotation-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-y-rotation-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-y-rotation-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-z-rotation-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-z-rotation-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-euler-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-euler-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-quaternion-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-quaternion-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-scaling-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-scaling-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-lookat-matrix&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-lookat-matrix! (make-matrix&) ,@rest)
        form-src))))


(syntax public make-lookat-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-lookat-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-inverse-lookat-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-inverse-lookat-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-perspective-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-perspective-matrix! (make-matrix^) ,@rest)
        form-src))))


(syntax public make-view-matrix^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(make-view-matrix! (make-matrix^) ,@rest)
        form-src))))


;;;
;;;; Dye
;;;


(syntax public make-dye&
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(static (make-dye))
      form-src)))


(syntax public make-dye^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <dye>)
      form-src)))


(syntax public dye&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(dye! (make-dye&) ,@rest)
        form-src))))


(syntax public dye^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(dye! (make-dye^) ,@rest)
        form-src))))


;;;
;;;; UV
;;;


(syntax public make-uv^
  (lambda (form-src usage-environment macro-environment)
    (sourcify-deep-if
      `(stack <uv>)
      form-src)))


;;;
;;;; Gravity
;;;


(syntax public gravity-up^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(gravity-up! (make-vertex^) ,@rest)
        form-src))))


;;;
;;;; Movement
;;;


(syntax public make-movement&
  (lambda (form-src usage-environment macro-environment)
    (let ((origin (cadr (source-code form-src)))
          (vector (caddr (source-code form-src)))
          (mvt (generate-symbol "mvt")))
      (sourcify-deep-if
        `(let ((,mvt (static (new Movement (vertex 0. 0. 0.) (vertex 0. 0. 1.)))))
           (set-origin ,mvt ,origin)
           (set-vector ,mvt ,vector)
           ,mvt)
        form-src))))


(syntax public make-movement^
  (lambda (form-src usage-environment macro-environment)
    (let ((origin (cadr (source-code form-src)))
          (vector (caddr (source-code form-src)))
          (mvt (generate-symbol "mvt")))
      (sourcify-deep-if
        `(let ((,mvt (stack <Movement> Movement (make-vertex^) (make-vertex^) (make-vertex^) (make-fl^))))
           (set-origin ,mvt ,origin)
           (set-vector ,mvt ,vector)
           ,mvt)
        form-src))))


(syntax public movement-end^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(movement-end! (make-vertex^) ,@rest)
        form-src))))


(syntax public movement-end-to^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(movement-end-to! (make-vertex^) ,@rest)
        form-src))))


;;;
;;;; Ray
;;;


(syntax public transform-ray&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(transform-ray! (values& (make-vertex&) (make-vertex&)) ,@rest)
        form-src))))


(syntax public ray-point-distance&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(ray-point-distance! (make-f64&) ,@rest)
        form-src))))


(syntax public ray-point-horizontal-distance&
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(ray-point-horizontal-distance! (make-f64&) ,@rest)
        form-src))))


;;;
;;;; Plane
;;;


(syntax public plane-closest^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(plane-closest! (make-vertex^) ,@rest)
        form-src))))


;;;
;;;; Polygon
;;;


(syntax public closest-point-on-line^
  (lambda (form-src usage-environment macro-environment)
    (let ((rest (cdr (source-code form-src))))
      (sourcify-deep-if
        `(closest-point-on-line! (make-vertex^) ,@rest)
        form-src)))))
