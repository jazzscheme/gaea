;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Mesh
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.mesh jazz


(import (jazz.opengl.glew)
        (gaea.buffer)
        (gaea.material)
        (gaea.program)
        (gaea.shader))


(proclaim (warn optimizations))


(constant inline vertex-floats <fx>
  10)

(constant inline neighbors-floats <fx>
  7)

(constant inline lightmap-floats <fx>
  3)

(constant inline instance-floats <fx>
  3)

(constant inline triangle-floats <fx>
  30
  @wait-constant-folding
  (* 3 vertex-floats))

(constant inline triangle-neighbors-floats <fx>
  21
  @wait-constant-folding
  (* 3 neighbors-floats))

(constant inline triangle-lightmap-floats <fx>
  9
  @wait-constant-folding
  (* 3 lightmap-floats))

(constant inline vertex-stride <fx>
  40
  @wait-constant-folding
  (* 10 float-size))

(constant inline neighbors-stride <fx>
  28
  @wait-constant-folding
  (* 7 float-size))

(constant inline lightmap-stride <fx>
  12
  @wait-constant-folding
  (* 3 float-size))

(constant inline vertex-offset <fx>
  0)

(constant inline normal-offset <fx>
  12
  @wait-constant-folding
  (* 3 float-size))


(constant inline texture-offset <fx>
  24
  @wait-constant-folding
  (* 6 float-size))

(constant inline bone-offset <fx>
  36
  @wait-constant-folding
  (* 9 float-size))

(constant inline swizz-offset <fx>
  0)

(constant inline neighbor1-offset <fx>
  4
  @wait-constant-folding
  float-size)

(constant inline neighbor2-offset <fx>
  16
  @wait-constant-folding
  (* 4 float-size))

(constant inline instance-stride <fx>
  12
  @wait-constant-folding
  (* 3 float-size))

(constant inline instancepos-offset <fx>
  0)

(definition public feedback-floats <fx>
  16)

(definition public triangle-feedback-floats <fx>
  48
  @wait-constant-folding
  (* 3 feedback-floats))


(definition protected transform-feedback?
  (make-parameter #f))


;;;
;;;; Mesh
;;;


(class Mesh extends Object
  
  
  (slot array <object> initialize #f accessors generate)
  
  
  (method override (destroy self)
    (free-resources self))
  
  
  (method public virtual (empty? self)
    #t)
  
  
  (method public virtual (count-floats self)
    0)
  
  
  (method public virtual (setup-array self program)
    (set! array (create-array program self)))
  
  
  (method public virtual (draw-array self)
    )
  
  
  (method protected virtual (free-resources self)
    (when array
      (glDeleteVertexArrays* array)
      (set! array #f))))


;;;
;;;; Vertex-Mesh
;;;


;; Vertices
;;   triangle1 ...
;;   v1 n1 t1 b1 v2 n2 t2 b2 v3 n3 t3 b3 ...
;;   v1x v1y v1z n1x n1y n1z t1u t1v t1z b1 v2x v2y v2z n2x n2y n2z t2u t2v t2z b2 v3x v3y v3z n3x n3y n3z t3u t3v t3z b3 ...
;;
;; Neighbors
;;   rank neighbor1 neighbor2 ...
;;   rank v11 v12 v13 v21 v22 v23 ...
;;
;; Lightmap
;;   l1 l2 l3 ...
;;   l1r l1g l1b l2r l2g l2b l3r l3g l3b ...
;;
;; Instance
;;   m1 m2 m3 ...


(class Vertex-Mesh extends Mesh
  
  
  (slot vertices-buffer  <Buffer>    getter generate)
  (slot neighbors-buffer <Buffer>    getter generate)
  (slot lightmap-buffer  <Buffer>    getter generate)
  (slot instance-buffer  <Buffer>    getter generate)
  (slot feedback-buffer  <Buffer>    getter generate)
  (slot material         <Material+> accessors generate)
  
  ;; debug
  (slot vertices-data <object> initialize #f accessors generate)
  (slot lightmap-data <object> initialize #f accessors generate)
  
  
  (method override (initialize self (material: material #f))
    (nextmethod self)
    (set! self.vertices-buffer (new Buffer))
    (set! self.neighbors-buffer (new Buffer))
    (set! self.lightmap-buffer (new Buffer))
    (set! self.instance-buffer (new Buffer))
    (set! self.feedback-buffer (new Buffer))
    (set! self.material material))
  
  
  (method override (empty? self)
    (empty? vertices-buffer))
  
  
  (method override (count-floats self)
    (+ (or (get-floats vertices-buffer) 0)
       @need-to-adjust-debug-info-calculations
       (or (get-floats neighbors-buffer) 0)
       @need-to-adjust-debug-info-calculations
       (or (get-floats lightmap-buffer) 0)))
  
  
  (method override (setup-array self program)
    (set! array (create-array program self)))
  
  
  (method override (draw-array self)
    (define (draw)
      (glBindVertexArray array)
      (glDrawArrays GL_TRIANGLES 0 (get-indices vertices-buffer)))
    
    (if #t @convert (or (not debug-transform?)
            (not (transform-feedback?))
            (not (get-buffer feedback-buffer)))
        (draw)
      (bind-feedback-buffer feedback-buffer)
      (glBeginTransformFeedback GL_TRIANGLES)
      (draw)
      (glEndTransformFeedback)
      (unbind-feedback-buffer feedback-buffer)))
  
  
  (method public (allocate-vertices self)
    (generate-buffer vertices-buffer))
  
  (method public (allocate-neighbors self)
    (generate-buffer neighbors-buffer))
  
  (method public (allocate-lightmap self)
    (generate-buffer lightmap-buffer))
  
  (method public (allocate-instance self)
    (generate-buffer instance-buffer))
  
  (method public (allocate-feedback self)
    (generate-buffer feedback-buffer))
  
  
  (method public (free-vertices self)
    (free-buffer vertices-buffer))
  
  (method public (free-neighbors self)
    (free-buffer neighbors-buffer))
  
  (method public (free-lightmap self)
    (free-buffer lightmap-buffer))
  
  (method public (free-instance self)
    (free-buffer instance-buffer))
  
  (method public (free-feedback self)
    (free-buffer feedback-buffer))
  
  
  (method override (free-resources self)
    (free-vertices self)
    (free-neighbors self)
    (free-lightmap self)
    (free-instance self)
    (free-feedback self)
    (nextmethod self))))
