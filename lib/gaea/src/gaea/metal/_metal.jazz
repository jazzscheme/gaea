;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Metal Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.metal jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.cocoa.types))


(c-include "<stdio.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")


;;;
;;;; Header
;;;


(c-declare cocoa #/Objective-C/

#import <Metal/Metal.h>
#import <QuartzCore/CAMetalLayer.h>
#import <simd/simd.h>

//#)


;;;
;;;; Types
;;;


(c-type id<MTLCommandQueue> "id<MTLCommandQueue>")
(c-type id<MTLLibrary> "id<MTLLibrary>")
(c-type id<MTLBuffer> "id<MTLBuffer>")
(c-type id<CAMetalDrawable> "id<CAMetalDrawable>")
(c-type id<MTLRenderPipelineState> "id<MTLRenderPipelineState>")
(c-type id<MTLCommandBuffer> "id<MTLCommandBuffer>")
(c-type id<MTLRenderCommandEncoder> "id<MTLRenderCommandEncoder>")

(c-type MTLRenderPassDescriptor "MTLRenderPassDescriptor")
(c-type MTLRenderPassDescriptor* (pointer MTLRenderPassDescriptor))


;;;
;;;; Setup
;;;


(c-declare cocoa #/Objective-C/

id<MTLDevice> device;
id<MTLCommandQueue> queue;

id<MTLDevice> metalSetupDevice()
{
    device = MTLCreateSystemDefaultDevice();
    
    return device;
}

id<MTLCommandQueue> metalSetupQueue()
{
    queue = [device newCommandQueue];
    
    return queue;
}

//#)


;;;
;;;; Library
;;;


(c-declare cocoa #/Objective-C/

id<MTLLibrary> metalMakeLibrary(NSString* source)
{
    MTLCompileOptions* compileOptions = [MTLCompileOptions new];
    compileOptions.languageVersion = MTLLanguageVersion1_1;
    NSError* compileError;
    id<MTLLibrary> lib = [device newLibraryWithSource:
       source
       options:compileOptions error:&compileError];
    if (!lib)
    {
        NSLog(@"can't create library: %@", compileError); 
        exit(EXIT_FAILURE);
    }
    return lib;
}

id<MTLRenderPipelineState> metalMakePipeline(id<MTLLibrary> lib, NSString* vs_name, NSString* fs_name)
{
    id<MTLFunction> vs = [lib newFunctionWithName:vs_name];
    assert(vs);
    id<MTLFunction> fs = [lib newFunctionWithName:fs_name];
    assert(fs);
    MTLRenderPipelineDescriptor* pipeline_descriptor = [MTLRenderPipelineDescriptor new];
    pipeline_descriptor.vertexFunction = vs;
    pipeline_descriptor.fragmentFunction = fs;
    pipeline_descriptor.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
    id<MTLRenderPipelineState> pipeline_state = [device newRenderPipelineStateWithDescriptor:pipeline_descriptor error:NULL];
    assert(pipeline_state);

    return pipeline_state;
}

//#)


;;;
;;;; Buffer
;;;


(c-declare cocoa #/Objective-C/

id<MTLBuffer> metalNewBufferWithLength(int length)
{
    return [device newBufferWithLength:length options:MTLResourceOptionCPUCacheModeDefault];
}

id<MTLBuffer> metalNewBufferWithBytes(___SCMOBJ content, int size)
{
    return [device newBufferWithBytes:___CAST(float*,___BODY(content))
                               length:size * sizeof(float)
                              options:MTLResourceOptionCPUCacheModeDefault];
}

//#)


;;;
;;;; Render
;;;


(c-declare cocoa #/Objective-C/

id<CAMetalDrawable> metalLayerNextDrawable(CAMetalLayer* layer)
{
    return [layer nextDrawable];
}

id<MTLCommandBuffer> metalMakeCommandBuffer()
{
    return [queue commandBuffer];
}

void metalReleaseCommandBuffer(id<MTLCommandBuffer> buffer)
{
    [buffer release];
}

MTLRenderPassDescriptor* metalMakeRenderPassDescriptor(id<CAMetalDrawable> drawable)
{
    MTLRenderPassDescriptor* pass = [MTLRenderPassDescriptor renderPassDescriptor];
    pass.colorAttachments[0].clearColor = MTLClearColorMake(0, 0, 0, 1);
    pass.colorAttachments[0].loadAction  = MTLLoadActionClear;
    pass.colorAttachments[0].storeAction = MTLStoreActionStore;
    pass.colorAttachments[0].texture = drawable.texture;

    return pass;
}

MTLRenderPassDescriptor* metalMakeRenderPassDescriptorClear(id<CAMetalDrawable> drawable, double red, double green, double blue)
{
    MTLRenderPassDescriptor* pass = [MTLRenderPassDescriptor renderPassDescriptor];
    pass.colorAttachments[0].clearColor = MTLClearColorMake(red, green, blue, 1);
    pass.colorAttachments[0].loadAction  = MTLLoadActionClear;
    pass.colorAttachments[0].storeAction = MTLStoreActionStore;
    pass.colorAttachments[0].texture = drawable.texture;

    return pass;
}

id<MTLRenderCommandEncoder> metalMakeRenderCommandEncoder(id<MTLCommandBuffer> buffer, MTLRenderPassDescriptor* pass)
{
    return [buffer renderCommandEncoderWithDescriptor:pass];
}

void metalEncoderSetRenderPipelineState(id<MTLRenderCommandEncoder> encoder, id<MTLRenderPipelineState> state)
{
    [encoder setRenderPipelineState:state];
}

void metalEncoderSetVertexBuffer(id<MTLRenderCommandEncoder> encoder, id<MTLBuffer> buffer, int index)
{
    [encoder setVertexBuffer:buffer offset:0 atIndex:index];
}

void metalEncoderDrawPrimitives(id<MTLRenderCommandEncoder> encoder)
{
    [encoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:3];
}

void metalEndPresentCommit(id<CAMetalDrawable> drawable, id<MTLCommandBuffer> buffer, id<MTLRenderCommandEncoder> encoder)
{
    [encoder endEncoding];
    [buffer presentDrawable:drawable];
    [buffer commit];
}

//#)


;;;
;;;; External
;;;


(c-external (metalSetupDevice) id<MTLDevice>)
(c-external (metalSetupQueue) id<MTLCommandQueue>)
(c-external (metalMakeLibrary NSString*) id<MTLLibrary>)
(c-external (metalMakePipeline id<MTLLibrary> NSString* NSString*) id<MTLRenderPipelineState>)
(c-external (metalNewBufferWithLength int) id<MTLBuffer>)
(c-external (metalNewBufferWithBytes scheme-object int) id<MTLBuffer>)
(c-external (metalLayerNextDrawable CAMetalLayer*) id<CAMetalDrawable>)
(c-external (metalMakeCommandBuffer) id<MTLCommandBuffer>)
(c-external (metalReleaseCommandBuffer id<MTLCommandBuffer>) void)
(c-external (metalMakeRenderPassDescriptor id<CAMetalDrawable>) MTLRenderPassDescriptor*)
(c-external (metalMakeRenderPassDescriptorClear id<CAMetalDrawable> double double double) MTLRenderPassDescriptor*)
(c-external (metalMakeRenderCommandEncoder id<MTLCommandBuffer> MTLRenderPassDescriptor*) id<MTLRenderCommandEncoder>)
(c-external (metalEncoderSetRenderPipelineState id<MTLRenderCommandEncoder> id<MTLRenderPipelineState>) void)
(c-external (metalEncoderSetVertexBuffer id<MTLRenderCommandEncoder> id<MTLBuffer> int) void)
(c-external (metalEncoderDrawPrimitives id<MTLRenderCommandEncoder>) void)
(c-external (metalEndPresentCommit id<CAMetalDrawable> id<MTLCommandBuffer> id<MTLRenderCommandEncoder>) void))
