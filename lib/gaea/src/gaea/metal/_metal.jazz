;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Metal Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.metal jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.cocoa.types))


(c-include "<stdio.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")


;;;
;;;; Header
;;;


(c-declare cocoa #/Objective-C/

#import <Metal/Metal.h>
#import <QuartzCore/CAMetalLayer.h>
#import <simd/simd.h>

//#)


;;;
;;;; Types
;;;


(c-type id<MTLCommandQueue> "id<MTLCommandQueue>")
(c-type id<MTLLibrary> "id<MTLLibrary>")
(c-type id<MTLRenderPipelineState> "id<MTLRenderPipelineState>")


;;;
;;;; Setup
;;;


(c-declare cocoa #/Objective-C/

id<MTLDevice> device;
id<MTLCommandQueue> queue;

id<MTLDevice> metalSetupDevice()
{
    device = MTLCreateSystemDefaultDevice();
    
    return device;
}

id<MTLCommandQueue> metalSetupQueue()
{
    queue = [device newCommandQueue];
    
    return queue;
}

//#)


;;;
;;;; Library
;;;


(c-declare cocoa #/Objective-C/

id<MTLLibrary> metalMakeLibrary(NSString* source)
{
    MTLCompileOptions* compileOptions = [MTLCompileOptions new];
    compileOptions.languageVersion = MTLLanguageVersion1_1;
    NSError* compileError;
    id<MTLLibrary> lib = [device newLibraryWithSource:
       source
       options:compileOptions error:&compileError];
    if (!lib)
    {
        NSLog(@"can't create library: %@", compileError); 
        exit(EXIT_FAILURE);
    }
    return lib;
}

id<MTLRenderPipelineState> metalMakePipeline(id<MTLLibrary> lib)
{
    id<MTLFunction> vs = [lib newFunctionWithName:@"v_simple"];
    assert(vs);
    id<MTLFunction> fs = [lib newFunctionWithName:@"f_simple"];
    assert(fs);
    MTLRenderPipelineDescriptor* pipeline_descriptor = [MTLRenderPipelineDescriptor new];
    pipeline_descriptor.vertexFunction = vs;
    pipeline_descriptor.fragmentFunction = fs;
    pipeline_descriptor.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
    id<MTLRenderPipelineState> pipeline_state = [device newRenderPipelineStateWithDescriptor:pipeline_descriptor error:NULL];
    assert(pipeline_state);

    return pipeline_state;
}

//#)


;;;
;;;; Render
;;;


(c-declare cocoa #/Objective-C/

void metalRenderClear(void* layer)
{
    @autoreleasepool {
        id<CAMetalDrawable> drawable = [(CAMetalLayer*) layer nextDrawable];

        MTLRenderPassDescriptor* pass = [MTLRenderPassDescriptor renderPassDescriptor];
        pass.colorAttachments[0].clearColor = MTLClearColorMake(0, 0, 1, 1);
        pass.colorAttachments[0].loadAction  = MTLLoadActionClear;
        pass.colorAttachments[0].storeAction = MTLStoreActionStore;
        pass.colorAttachments[0].texture = drawable.texture;

        id<MTLCommandBuffer> buffer = [queue commandBuffer];
        id<MTLRenderCommandEncoder> encoder = [buffer renderCommandEncoderWithDescriptor:pass];
        [encoder endEncoding];
        [buffer presentDrawable:drawable];
        [buffer commit];
    }
}

void metalRenderTriangle(void* layer, id<MTLRenderPipelineState> pipeline_state)
{
    @autoreleasepool {
        id<CAMetalDrawable> drawable = [(CAMetalLayer*) layer nextDrawable];

        id<MTLCommandBuffer> buffer = [queue commandBuffer];
        MTLRenderPassDescriptor* pass = [MTLRenderPassDescriptor new];
        MTLRenderPassColorAttachmentDescriptor* color = pass.colorAttachments[0];
        color.texture = drawable.texture;
        color.loadAction = MTLLoadActionClear;
        color.clearColor = MTLClearColorMake(0, 0, 0, 1);
        color.storeAction = MTLStoreActionStore;
        id<MTLRenderCommandEncoder> encoder = [buffer renderCommandEncoderWithDescriptor:pass];
        [encoder setRenderPipelineState:pipeline_state];
        [encoder setVertexBytes:(float[]) {
             0, 0, 0, 1 ,
             -1, 1, 0, 1 ,
             1, 1, 0, 1 ,
        } length:3 * sizeof(vector_float4) atIndex:0];
        [encoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:3];
        [encoder endEncoding];
        [buffer presentDrawable:drawable];
        [buffer commit];
    }
}

void metalTest()
{
    float* ptr = (float*) (vector_float4[]){
            { 0, 0, 0, 1 },
            { -1, 1, 0, 1 },
            { 1, 1, 0, 1 },
        };
    printf("%f %f %f %f\n", ptr[0], ptr[1], ptr[2], ptr[3]);
    printf("%f %f %f %f\n", ptr[4], ptr[5], ptr[6], ptr[7]);
    
    float p[] = (float[]) {
             0, 0, 0, 1 ,
             -1, 1, 0, 1 ,
             1, 1, 0, 1 ,
        };
    printf("%f %f %f %f\n", p[0], p[1], p[2], p[3]);
    printf("%f %f %f %f\n", p[4], p[5], p[6], p[7]);
}

//#)


;;;
;;;; External
;;;


(c-external (metalSetupDevice) id<MTLDevice>)
(c-external (metalSetupQueue) id<MTLCommandQueue>)
(c-external (metalMakeLibrary NSString*) id<MTLLibrary>)
(c-external (metalMakePipeline id<MTLLibrary>) id<MTLRenderPipelineState>)
(c-external (metalRenderClear CAMetalLayer*) void)
(c-external (metalRenderTriangle CAMetalLayer* id<MTLRenderPipelineState>) void)
(c-external (metalTest) void))
