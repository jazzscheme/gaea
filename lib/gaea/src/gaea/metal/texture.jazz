;;;===============
;;;  JazzScheme
;;;===============
;;;
;;;; Metal Textures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.metal.texture jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.math)
        (jazz.platform.types)
        (jazz.screen)
        (gaea.metal)
        (gaea.opengl.render))


;;;
;;;; Texture
;;;


(class Metal-Texture extends Object
  
  
  (slot scale                getter generate)
  (slot width      <fx>      getter generate)
  (slot height     <fx>      getter generate)
  (slot stride     <object>  getter generate)
  (slot depth      <fx+>     getter generate)
  (slot data       <object>  getter generate)
  (slot id         <object>  getter generate)
  (slot min-filter <object>  getter generate)
  (slot mag-filter <object>  getter generate)
  (slot wrap       <object>  getter generate)
  (slot mipmap?    <bool>    getter generate)
  (slot created?   <bool>    getter generate)
  (slot metadata   <object>  getter generate)
  (slot file       <object>  accessors generate)
  
  
  (method override (initialize self width height stride data (scale?: scale? #f) (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #f) (metadata: metadata #f) (file: file #f))
    (with-reentrant-render-mutex
      (lambda ()
        (set! self.scale (if scale? (main-screen-scale-factor) 1))
        (set! self.width (scale->device width self.scale))
        (set! self.height (scale->device height self.scale))
        (set! self.stride stride)
        (set! self.depth #f)
        (set! self.data data)
        (set! self.id (metalNewTexture self.width self.height self.stride self.data))
        (set! self.min-filter min-filter)
        (set! self.mag-filter mag-filter)
        (set! self.wrap wrap)
        (set! self.mipmap? mipmap?)
        (set! self.created? #f)
        (set! self.metadata metadata)
        (set! self.file file))))
  
  
  (method override (destroy self)
    (with-reentrant-render-mutex
      (lambda ()
        (nextmethod self))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}x{s}" width height))))
  
  
  (method (with-texture self proc)
    (with-reentrant-render-mutex
      (lambda ()
        (proc))))
  
  
  (method public (map-texture self)
    (with-texture self
      (lambda ()
        (metalTextureReplaceRegion id width height stride data)))))


;;;
;;;; Cairo
;;;


(class Cairo-Metal-Texture extends Metal-Texture
  
  
  (slot surface <Surface> getter generate)
  
  
  (method override (initialize self width height . rest)
    (bind-keywords ((surface #f) (scale? #f) . others) rest
      (let ((surface (or surface (new Image-Surface (new Dimension width height) scale?: scale?))))
        (let ((stride (cairo_image_surface_get_stride (get-handle surface)))
              (data (cairo_image_surface_get_data (get-handle surface))))
          (apply nextmethod self width height stride data scale?: scale? others)
          (set! self.surface surface)))))
  
  
  (method override (destroy self)
    (close surface)
    (nextmethod self)))


(definition public (make-cairo-metal-texture width height . rest)
  (apply new Cairo-Metal-Texture width height rest)))
