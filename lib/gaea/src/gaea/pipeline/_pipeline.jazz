;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Pipeline
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.pipeline jazz


(import (jazz.platform)
        (gaea.array)
        (gaea.buffer)
        (gaea.engine)
        (gaea.metal)
        (gaea.opengl.glew)
        (gaea.program))


;;;
;;;; Pipeline
;;;


(class Pipeline extends Object
  
  
  (slot program  getter generate)
  (slot layout   getter generate)
  (slot pipeline getter generate)
  
  
  (method override (initialize self program layout)
    (nextmethod self)
    (set! self.program program)
    (set! self.layout layout)
    (when (metal?)
      (let ((lib (get-library program))
            (vs (get-vertex-shader program))
            (fs (get-fragment-shader program))
            (desc (metalMakeVertexDescriptor)))
        (let ((attribute-index 0))
          (for-each (lambda (buffer-layout)
                      (bind (buffer-index stride . attributes) buffer-layout
                        (metalVertexDescriptorLayout desc buffer-index MTLVertexStepFunctionPerVertex stride)
                        (for-each (lambda (attribute)
                                    (bind (name format offset) attribute
                                      (let ((format (case format
                                                      ((float2) MTLVertexFormatFloat2)
                                                      ((float3) MTLVertexFormatFloat3)
                                                      ((float4) MTLVertexFormatFloat4)
                                                      (else (error "Unknown attribute format: {s}" format)))))
                                        (metalVertexDescriptorAttribute desc attribute-index format offset buffer-index)))
                                    (increase! attribute-index))
                                  attributes)))
                    layout))
        (let ((pipeline (metalMakeRenderPipelineState lib vs fs desc)))
          (set! self.pipeline pipeline)))))
  
  
  (method public (with-pipeline self encoder thunk)
    (if (metal?)
        (begin
          (metalEncoderSetRenderPipelineState encoder pipeline)
          (thunk))
      (use program)
      (thunk)
      (unuse program)))


  (method public (uniform-binding self uniform)
    (when (opengl?)
      (let ((name (get-name uniform))
            (binding (get-binding uniform))
            (programid (get-program program)))
        (let ((block-index (glGetUniformBlockIndex programid name)))
          (glUniformBlockBinding programid block-index binding)))))
  
  
  (method public (setup-array self array)
    (when (opengl?)
      (glBindVertexArray (get-array array))
      (for-each (lambda (buffer buffer-layout)
                  (bind (buffer-index stride . attributes) buffer-layout
                    (bind-buffer buffer)
                    (for-each (lambda (attribute)
                                (bind (name format offset) attribute
                                  (let ((location (get-attribute program name))
                                        (size (case format
                                                ((float2) 2)
                                                ((float3) 3)
                                                ((float4) 4)
                                                (else (error "Unknown attribute format: {s}" format))))
                                        (type GL_FLOAT))
                                    (enable-vertex-attrib buffer location)
                                    (set-attrib-pointer buffer location size type stride offset))))
                              attributes)
                    (unbind-buffer buffer)))
                (get-buffers array)
                layout)))
  
  
  (method public (find-attribute self target-name)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (buffer-layout)
                    (bind (buffer-index stride . attributes) buffer-layout
                      (for-each (lambda (attribute)
                                  (bind (name format offset) attribute
                                    (when (equal? name target-name)
                                      (continuation-return return (cons buffer-index (cons stride attribute))))))
                                attributes)))
                layout)
        #f)))
  
  
  (method public (bind-uniforms self . rest)
    (when (opengl?)
      (apply bind-uniforms program rest)))
  
  
  (method public (create-array self mesh)
    (when (opengl?)
      (create-array program mesh)))
  
  
  (method public (unbind-uniforms self)
    (when (opengl?)
      (unbind-uniforms program))))


;;;
;;;; Pipelines
;;;


(definition protected pipelines
  (make-table test: eq?))


(definition public (register-pipeline name pipeline)
  (table-set! pipelines name pipeline))

(definition public (registered-pipeline name)
  (let ((pipeline (table-ref pipelines name #f)))
    (if (procedure? pipeline)
        (let ((pipeline (pipeline)))
          (table-set! pipelines name pipeline)
          pipeline)
      pipeline)))

(definition public (require-pipeline name)
  (or (registered-pipeline name)
      (error "Unknown pipeline: {s}" name))))
