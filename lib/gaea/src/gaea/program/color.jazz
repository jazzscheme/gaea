;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Color Program
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.program.color jazz


(import (jazz.platform)
        (jazz.opengl.glew)
        (jazz.syntax (phase syntax))
        (gaea.buffer)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.shader))


;;;
;;;; Shaders
;;;


(definition (build-mesh-color-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform vec4 overlay;
uniform vec4 color;
//#

#/C/
in vec3 vertex;
in vec3 normal;
in float bone_id;

out vec4 final_color;

void main()
{
//#

#/C/
    vec4 skeletal_pos = vec4(vertex, 1.0);
    // vec3 skeletal_normal = normal;
    gl_Position = projection_matrix * view_matrix * model_matrix * skeletal_pos;
    final_color = color;
}
//#))


(definition (build-mesh-color-fs)
  (string-append glsl-version
    #/C/
uniform vec4 overlay;

in vec4 final_color;

out vec4 fragColor;

void main()
{
    // fragColor = final_color * overlay;
    fragColor = final_color;
}
//#))


;;;
;;;; Program
;;;


(class Color-Program extends Mesh-Program
  
  
  (slot color-uniform)
  
  
  (method override (prepare self)
    (nextmethod self)
    (set! color-uniform (add-uniform self "color")))
  
  
  (method override (use-normal? self)
    #f)
  
  
  (method override (create-vertex-shader self)
    (build-mesh-color-vs))
  
  (method override (create-fragment-shader self)
    (build-mesh-color-fs))
  
  
  (method override (bind-uniforms self projection-matrix view-matrix @convert overlay @convert alpha-cut @convert lighting color)
    (nextmethod self projection-matrix view-matrix @convert #f @convert overlay @convert alpha-cut @convert lighting)
    ;; Color
    (assert color)
    (glUniform4fv* color-uniform 1 color)))


;;;
;;;; Register
;;;


(register-mesh-program 'color (lambda () (new Color-Program))))
