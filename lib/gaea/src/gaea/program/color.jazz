;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Color Program
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.program.color jazz


(import (jazz.platform)
        (jazz.syntax (phase syntax))
        (gaea.array)
        (gaea.buffer)
        (gaea.geometry)
        (gaea.opengl.glew)
        (gaea.program)
        (gaea.shader))


;;;
;;;; Array
;;;


;; Vertices
;;   triangle1 ...
;;   v1 c1 v2 c2 v3 c3 ...
;;   v1x v1y v1z c1r c1g c1b v2x v2y v2z c2r c2g c2b v3x v3y v3z c3r c3g c3b ...


(constant inline color-vertex-floats <fx>
  6)

(constant inline color-triangle-floats <fx>
  (* 3 color-vertex-floats))

(constant inline color-vertex-stride <fx>
  (* color-vertex-floats float-size))

(constant inline color-vertex-offset <fx>
  0)

(constant inline color-color-offset <fx>
  (* 3 float-size))


(class Color-Array extends Array
  
  
  (slot vertices-buffer <Buffer> getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! self.vertices-buffer (new Buffer)))
  
  
  (method override (empty? self)
    (empty? vertices-buffer))
  
  
  (method override (count-floats self)
    (or (get-floats vertices-buffer) 0))
  
  
  (method override (draw-array self)
    (glBindVertexArray array)
    (glDrawArrays GL_TRIANGLES 0 (get-indices vertices-buffer)))
  
  
  (method public (allocate-vertices self)
    (generate-buffer vertices-buffer))
  
  
  (method public (free-vertices self)
    (free-buffer vertices-buffer))
  
  
  (method override (free-array self)
    (free-vertices self)
    (nextmethod self)))


;;;
;;;; Shaders
;;;


(definition (build-color-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;

in vec3 vertex;
in vec4 color;

out vec4 final_color;

void main()
{
    gl_Position = projection_matrix * view_matrix * vec4(vertex, 1.0);
    final_color = color;
}
//#))


(definition (build-color-fs)
  (string-append glsl-version
    #/C/
in vec4 final_color;

out vec4 fragColor;

void main()
{
    fragColor = final_color;
}
//#))


;;;
;;;; Program
;;;


(class Color-Program extends Program
  
  
  (slot projection_matrix-uniform)
  (slot view_matrix-uniform)
  (slot vertex-attribute)
  (slot color-attribute)
  
  
  (method override (prepare self)
    (set-vs self (create-vertex-shader self))
    (set-fs self (create-fragment-shader self))
    (link self)
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix"))
    (set! vertex-attribute (add-attribute self "vertex"))
    (set! color-attribute (add-attribute self "color")))
  
  
  (method override (create-vertex-shader self)
    (build-color-vs))
  
  (method override (create-fragment-shader self)
    (build-color-fs))
  
  
  (method override (enable-attributes self array <Array>) <void>
    (let ((buffer (get-vertices-buffer array)))
      (bind-buffer buffer)
      (enable-vertex-attrib buffer vertex-attribute)
      (set-attrib-pointer buffer vertex-attribute 3 GL_FLOAT color-vertex-stride color-vertex-offset)
      (enable-vertex-attrib buffer color-attribute)
      (set-attrib-pointer buffer color-attribute 3 GL_FLOAT color-vertex-stride color-color-offset)
      (unbind-buffer buffer)))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix)
    ;; Projection matrix
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    ;; View matrix
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix))
  
  
  (method package (unbind-uniforms self)
    ))


;;;
;;;; Register
;;;


(register-program 'color (lambda () (new Color-Program))))
