;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Model Program
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.program.model jazz


(import (jazz.opengl.glew)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.shader))


;;;
;;;; Shaders
;;;


(definition (build-model-mesh-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform mat4 bone_matrices[200];

in vec3 vertex;
in vec3 texture_coord;
in float bone_id;

out vec3 final_texture;

void main()
{
    vec4 skeletal_pos;
    vec3 skeletal_normal;

    mat4 boneTransform = bone_matrices[int(bone_id)];
    skeletal_pos = boneTransform * vec4(vertex, 1.0);

    vec3 fragPos = vec3(model_matrix * skeletal_pos);

    gl_Position = projection_matrix * view_matrix * vec4(fragPos, 1);
    final_texture = texture_coord;
}
//#))


(definition (build-model-mesh-fs)
  (string-append glsl-version
    #/C/
uniform sampler2D texture_sampler;

in vec3 final_texture;

out vec4 fragColor;

void main()
{
    fragColor = texture(texture_sampler, vec2(final_texture.x, final_texture.y));
}
//#))


;;;
;;;; Program
;;;


(definition protected max-bones <fx>
  16)

(definition bone-matrices
  (make-f32vector (* max-bones 16)))

(definition (fill-bone-matrices! matrices)
  (let ((count (length matrices)))
    (loop (for mat in matrices)
          (for i from 0)
          (let ((offset (* i 16)))
            (loop (for j from 0 below 16)
                  (f32vector-set! bone-matrices (+ offset j) (f64vector-ref mat j))))))
  bone-matrices)


(class Model-Mesh-Program extends Mesh-Program
  
  
  (method override (use-texture? self)
    #t)
  
  (method override (use-bone? self)
    #t)
  
  
  (method override (create-vertex-shader self)
    (build-model-mesh-vs))
  
  (method override (create-fragment-shader self)
    (build-model-mesh-fs))
  
  
  (method override (bind-material self id) <void>
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D id)
    (glUniform1i texture-uniform 0))
  
  
  (method override (bind-bones self bone-matrices) <void>
    (glUniformMatrix4fv* bone_matrices-uniform max-bones #f (fill-bone-matrices! bone-matrices)))
  
  
  (method override (bind-uniforms self projection-matrix view-matrix model-matrix)
    (nextmethod self projection-matrix view-matrix)
    ;; Model matrix
    (glUniformMatrix4dv* model_matrix-uniform 1 #f model-matrix)))


;;;
;;;; Register
;;;


(register-program 'model (lambda () (new Model-Mesh-Program))))
