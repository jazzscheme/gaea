;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Texture Mesh Program
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.program.texture jazz


(import (gaea.opengl.glew)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.shader))


;;;
;;;; Source
;;;


(definition texture-sources
  (list
    ;; metal
    (list
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position [[attribute(0)]];
        float3 texture  [[attribute(1)]];
    };

    struct vs_out
    {
        float4 position [[position]];
        float3 texture;
    };

    struct Uniforms
    {
        float4x4 projectionMatrix;
        float4x4 viewMatrix;
        float4x4 modelMatrix;
    };

    vertex vs_out vertex_simple(
        vs_in vertexIn [[stage_in]],
        constant Uniforms *uniforms [[buffer(0)]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->projectionMatrix * uniforms->viewMatrix * uniforms->modelMatrix * vertexIn.position;
        vertexOut.texture = vertexIn.texture;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, float2(vert.texture.x, vert.texture.y));
    }
//#
      "vertex_simple"
      "fragment_simple")
    
    ;; opengl
    (list
      ;; vertex
  (string-append glsl-version
#/C/
    layout (std140) uniform Matrices
    {
        mat4 projection_matrix;
        mat4 view_matrix;
        mat4 model_matrix;
    };

    in vec3 position;
    in vec3 texture;

    out vec3 final_texture;

    void main()
    {
        gl_Position = projection_matrix * view_matrix * model_matrix * vec4(position, 1.0);
        final_texture = texture;
    }
//#)
  ;; fragment
  (string-append glsl-version
#/C/
    uniform sampler2D texture_sampler;

    in vec3 final_texture;

    out vec4 fragColor;

    void main()
    {
        fragColor = texture(texture_sampler, vec2(final_texture.x, final_texture.y));
    }
//#))
    
    ;; inputs
    "position"
    "texture"))


;;;
;;;; Program
;;;


(class Texture-Program extends Program
  
  
  (method override (initialize self)
    (nextmethod self texture-sources))
  
  
  @convert
  (method override (bind-material self id) <void>
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D id)
    (glUniform1i texture-uniform 0)))


;;;
;;;; Register
;;;


(register-program 'texture (lambda () (new Texture-Program))))
