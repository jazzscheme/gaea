;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Shaders
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.shaders jazz


(definition glsl-version
  #/C/
#version 150

//#)


;;;
;;;; Mesh Color
;;;


(definition (build-mesh-color-vs)
  (string-append glsl-version
    #/C/
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform vec4 overlay;
uniform vec4 color;
//#

#/C/
in vec3 vertex_coord;
in vec3 normal;
in float bone_id;

out vec4 final_color;

void main()
{
//#

#/C/
    vec4 skeletal_pos = vec4(vertex_coord, 1.0);
    // vec3 skeletal_normal = normal;
    gl_Position = projection_matrix * view_matrix * model_matrix * skeletal_pos;
    final_color = color;
}
//#))


(definition public (build-mesh-color-fs)
  (string-append glsl-version
    #/C/
uniform vec4 overlay;

in vec4 final_color;

out vec4 fragColor;

void main()
{
    // fragColor = final_color * overlay;
    fragColor = final_color;
}
//#))


(definition public mesh-color-vs
  #f)

(definition public mesh-color-fs
  #f)


(definition public (build-color-shaders)
  (set! mesh-color-vs (build-mesh-color-vs))
  (set! mesh-color-fs (build-mesh-color-fs)))


;;;
;;;; Shaders
;;;


(definition protected (prepare-shaders)
  (build-color-shaders)))
