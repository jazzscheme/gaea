;;;===============
;;;  JazzScheme
;;;===============
;;;
;;;; Gaea Textures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.texture jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.jpeg)
        (jazz.math)
        (jazz.platform.types)
        (jazz.screen)
        (gaea.engine)
        (gaea.external.targa)
        (gaea.metal)
        (gaea.opengl.glew)
        (gaea.opengl.render)
        (gaea.program))


;;;
;;;; Image
;;;


(class Image-Texture extends Object
  
  
  (slot scale                getter generate)
  (slot width      <fx>      getter generate)
  (slot height     <fx>      getter generate)
  (slot stride     <fx>      getter generate)
  (slot depth      <fx+>     getter generate)
  (slot data       <object>  getter generate)
  (slot id         <object>  getter generate)
  (slot uniform    <object>  getter generate)
  (slot min-filter <object>  getter generate)
  (slot mag-filter <object>  getter generate)
  (slot wrap       <object>  getter generate)
  (slot mipmap?    <bool>    getter generate)
  (slot created?   <bool>    getter generate)
  (slot metadata   <object>  getter generate)
  (slot file       <object>  accessors generate)
  
  
  (method override (initialize self width height (stride: stride #f) (scale?: scale? #f) (data: data #f) (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #f) (metadata: metadata #f) (file: file #f))
    (with-reentrant-render-mutex
      (lambda ()
        (set! self.scale (if scale? (main-screen-scale-factor) 1))
        (set! self.width (scale->device width self.scale))
        (set! self.height (scale->device height self.scale))
        (set! self.stride (or stride (* width 4)))
        (set! self.depth #f)
        (set! self.data data)
        (set! self.id (if (opengl?)
                          (gl-generate-texture)
                        (metalNewTexture self.width self.height)))
        (set! self.uniform #f)
        (set! self.min-filter min-filter)
        (set! self.mag-filter mag-filter)
        (set! self.wrap wrap)
        (set! self.mipmap? mipmap?)
        (set! self.created? #f)
        (set! self.metadata metadata)
        (set! self.file file))))
  
  
  (method override (destroy self)
    (with-reentrant-render-mutex
      (lambda ()
        (when (opengl?)
          ;; to support shared textures
          (when id
            (gl-delete-texture id)
            (set! id #f)))
        (nextmethod self))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}x{s}" width height))))
  
  
  (method public (setup-uniform self pipeline name)
    (when (opengl?)
      (set! uniform (get-uniform (get-program pipeline) name))))
  
  
  (method public (bind-texture self encoder)
    (if (opengl?)
        (begin
          (glActiveTexture GL_TEXTURE0)
          (glBindTexture GL_TEXTURE_2D id)
          (glUniform1i uniform 0))
      (let ((sampler (metalNewSamplerState)))
        (metalEncoderSetFragmentTexture encoder id 0)
        (metalEncoderSetFragmentSamplerState encoder sampler 0))))
  
  
  (method (with-texture self target proc)
    (assert (opengl?))
    (with-reentrant-render-mutex
      (lambda ()
        (glBindTexture target id)
        (glTexParameteri target GL_TEXTURE_MIN_FILTER (or min-filter (if mipmap? GL_LINEAR_MIPMAP_LINEAR GL_LINEAR)))
        (glTexParameteri target GL_TEXTURE_MAG_FILTER (or mag-filter GL_LINEAR))
        (glTexParameteri target GL_TEXTURE_WRAP_S (or wrap GL_REPEAT))
        (glTexParameteri target GL_TEXTURE_WRAP_T (or wrap GL_REPEAT))
        (proc target)
        (when mipmap?
          (glGenerateMipmap target))
        (glBindTexture target 0)
        (gl-check-error))))
  
  
  (method (with-subtexture self target proc)
    (assert (opengl?))
    (with-reentrant-render-mutex
      (lambda ()
        (glBindTexture target id)
        (proc target)
        (glBindTexture target 0)
        (gl-check-error))))
  
  
  (method public (map-texture self (repeat?: repeat? #t))
    (if (metal?)
        (metalTextureReplaceRegion id width height stride data)
      (with-texture self GL_TEXTURE_2D
        (lambda (target)
          (glTexImage2D target
                        0
                        GL_RGBA
                        width
                        height
                        0
                        GL_BGRA
                        GL_UNSIGNED_BYTE
                        data)))))
  
  
  (method public (map-data self data (repeat?: repeat? #t))
    (if (metal?)
        (metalTextureReplaceRegion id width height stride data)
      (with-texture self GL_TEXTURE_2D
        (lambda (target)
          (glTexImage2D target
                        0
                        GL_RGBA
                        width
                        height
                        0
                        GL_BGRA
                        GL_UNSIGNED_BYTE
                        data)))))
  
  
  (method public (map-subtexture self rect (repeat?: repeat? #t))
    (if (or (not created?) (metal?)) ;; metal quicky
        (begin
          (map-texture self repeat?: repeat?)
          (set! created? #t))
      (with-subtexture self GL_TEXTURE_2D
        (lambda (target)
          (let ((l (max 0 (scale-outer->device (get-left rect) scale)))
                (t (max 0 (scale-outer->device (get-top rect) scale)))
                (r (min width (scale-outer->device (get-right rect) scale)))
                (b (min height (scale-outer->device (get-bottom rect) scale))))
            (let ((w (- r l))
                  (h (- b t)))
              (glPixelStorei GL_UNPACK_ROW_LENGTH (/ stride 4))
              (glPixelStorei GL_UNPACK_SKIP_ROWS t)
              (glPixelStorei GL_UNPACK_SKIP_PIXELS l)
              (glTexSubImage2D target
                               0
                               l
                               t
                               w
                               h
                               GL_BGRA
                               GL_UNSIGNED_BYTE
                               data)
              (glPixelStorei GL_UNPACK_ROW_LENGTH 0)
              (glPixelStorei GL_UNPACK_SKIP_ROWS 0)
              (glPixelStorei GL_UNPACK_SKIP_PIXELS 0)))))))
  
  
  (method public (map-texture-array self textures (repeat?: repeat? #t))
    (with-texture self GL_TEXTURE_2D_ARRAY_EXT
      (lambda (target)
        (let ((count (length textures)))
          (glTexImage3D target 0 GL_RGBA width height count 0 GL_BGRA GL_UNSIGNED_BYTE #f)
          (for-each (lambda (texture)
                      (bind (image image-width image-height depth) texture
                        (let ((width (if repeat? width image-width))
                              (height (if repeat? height image-height))
                              (data (if (u8vector? image)
                                        (still-u8vector-body image)
                                      (cairo_image_surface_get_data (get-handle image)))))
                          (glTexSubImage3D target 0 0 0 depth width height 1 GL_BGRA GL_UNSIGNED_BYTE data))))
                    textures)
          (set! depth count)))))
  
  
  (method public (map-texture-cube self front back up down right left)
    (define (teximage target image)
      (let ((data (if (u8vector? image)
                      (still-u8vector-body image)
                    (cairo_image_surface_get_data image))))
        (glTexImage2D target
                      0
                      GL_RGBA
                      width
                      height
                      0
                      GL_BGRA
                      GL_UNSIGNED_BYTE
                      data)))
    
    (with-texture self GL_TEXTURE_CUBE_MAP
      (lambda (target)
        (glTexParameteri target GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
        (glTexParameteri target GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
        (glTexParameteri target GL_TEXTURE_WRAP_R GL_CLAMP_TO_EDGE)
        (teximage GL_TEXTURE_CUBE_MAP_POSITIVE_X front)
        (teximage GL_TEXTURE_CUBE_MAP_NEGATIVE_X back)
        (teximage GL_TEXTURE_CUBE_MAP_POSITIVE_Y up)
        (teximage GL_TEXTURE_CUBE_MAP_NEGATIVE_Y down)
        (teximage GL_TEXTURE_CUBE_MAP_POSITIVE_Z right)
        (teximage GL_TEXTURE_CUBE_MAP_NEGATIVE_Z left)))))


;;;
;;;; File
;;;


(definition public (make-file-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (let ((ext (get-extension file)))
    (cond ((extension=? ext "png")
           (make-png-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          ((or (extension=? ext "jpg") (extension=? ext "jpeg"))
           (make-jpeg-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          ((extension=? ext "tga")
           (make-tga-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          (else
           (error "Unsupported texture format: {a}" ext)))))


(definition public (make-file-cairo-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (let ((ext (get-extension file)))
    (cond ((extension=? ext "png")
           (make-png-cairo-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          ((or (extension=? ext "jpg") (extension=? ext "jpeg"))
           (make-jpeg-cairo-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          ((extension=? ext "tga")
           (make-tga-cairo-texture file min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata))
          (else
           (error "Unsupported texture format: {a}" ext)))))


(definition public (cairo-surface-from-file file)
  (let ((ext (get-extension file)))
    (cond ((extension=? ext "png")
           (cairo-surface-from-png file))
          ((or (extension=? ext "jpg") (extension=? ext "jpeg"))
           (cairo-surface-from-jpeg file))
          ((extension=? ext "tga")
           (cairo-surface-from-tga file))
          (else
           (error "Unsupported texture format: {a}" ext)))))


;;;
;;;; PNG
;;;


(definition protected (make-png-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height surf) (cairo-surface-from-png file)
    (prog1 (let ((data (cairo_image_surface_get_data surf)))
             (let ((ct (new Image-Texture width height data: data min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
               (map-texture ct)
               ct))
      (cairo_surface_destroy surf))))


(definition protected (make-png-cairo-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height surf) (cairo-surface-from-png file)
    (let ((surface (new Surface surf)))
      (let ((ct (new Cairo-Texture width height surface: surface min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
        (map-texture ct)
        ct))))


(definition protected (cairo-surface-from-png file)
  (let ((surf (cairo_image_surface_create_from_png (parse file))))
    (let ((width (cairo_image_surface_get_width surf))
          (height (cairo_image_surface_get_height surf)))
      (values width height surf))))


;;;
;;;; JPEG
;;;


(definition protected (make-jpeg-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height surf) (cairo-surface-from-jpeg file)
    (prog1 (let ((data (cairo_image_surface_get_data surf)))
             (let ((ct (new Image-Texture width height data: data min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
               (map-texture ct)
               ct))
      (cairo_surface_destroy surf))))


(definition protected (make-jpeg-cairo-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height surf) (cairo-surface-from-jpeg file)
    (let ((surface (new Surface surf)))
      (let ((ct (new Cairo-Texture width height surface: surface min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
        (map-texture ct)
        ct))))


(definition protected (cairo-surface-from-jpeg file)
  (let ((surf (create-cairo-surface-from-jpeg file)))
    (let ((width (cairo_image_surface_get_width surf))
          (height (cairo_image_surface_get_height surf)))
      (values width height surf))))


;;;
;;;; TGA
;;;


(definition protected (make-tga-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height bytes/pixel data) (load-tga file)
    (let ((ct (new Image-Texture width height data: data min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
      (map-texture ct)
      ct)))


(definition protected (make-tga-cairo-texture file (min-filter: min-filter #f) (mag-filter: mag-filter #f) (wrap: wrap #f) (mipmap?: mipmap? #t) (metadata: metadata #f))
  (assert (exists? file))
  (bind-values (width height surf) (cairo-surface-from-tga file)
    (let ((surface (new Surface surf)))
      (let ((ct (new Cairo-Texture width height surface: surface min-filter: min-filter mag-filter: mag-filter wrap: wrap mipmap?: mipmap? metadata: metadata file: file)))
        (map-texture ct)
        ct))))


(definition protected (cairo-surface-from-tga file)
  (bind-values (width height bytes/pixel data) (load-tga file)
    (let ((format CAIRO_FORMAT_ARGB32))
      (let ((stride (cairo_format_stride_for_width format width)))
        (assert (= stride (* width bytes/pixel)))
        (values width height (cairo_image_surface_create_for_data data format width height stride))))))


;;;
;;;; Cairo
;;;


(class Cairo-Texture extends Image-Texture
  
  
  (slot surface <Surface> getter generate)
  
  
  (method override (initialize self width height . rest)
    (bind-keywords ((surface #f) (scale? #f) . others) rest
      (let ((surface (or surface (new Image-Surface (new Dimension width height) scale?: scale?))))
        (let ((data (cairo_image_surface_get_data (get-handle surface)))
              (stride (cairo_image_surface_get_stride (get-handle surface))))
          (apply nextmethod self width height stride: stride scale?: scale? data: data others)
          (set! self.surface surface)))))
  
  
  (method override (destroy self)
    (close surface)
    (nextmethod self)))


(definition public (make-cairo-texture width height . rest)
  (apply new Cairo-Texture width height rest)))
