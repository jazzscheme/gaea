;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; UV
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2021
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.uv jazz


(constant inline uv/left   0)
(constant inline uv/top    1)
(constant inline uv/right  2)
(constant inline uv/bottom 3)


(definition public inline (uv left <fl> top <fl> right <fl> bottom <fl> depth <fl>) <uv>
  (f32vector left top right bottom depth))


(definition public inline (allocate-uv left <fl> top <fl> right <fl> bottom <fl> depth <fl>) <uv>
  (f32vector left top right bottom depth))


(definition public inline (make-uv) <uv>
  (f32vector 0. 0. 0. 0. 0.))


(definition public (copy-uv uv <uv>) <uv>
  (let ((copy (make-uv)))
    (uv-copy! copy uv)
    copy))


(definition public (uv-rect uv <uv> l <fl> t <fl> r <fl> b <fl>) <uv>
  (let ((left (uv-left uv))
        (top (uv-top uv)))
    (let ((width (- (uv-right uv) left))
          (height (- (uv-bottom uv) top)))
      (allocate-uv (+ left (* l width)) (+ top (* t height)) (+ left (* r width)) (+ top (* b height)) (uv-depth uv)))))
        

(definition public inline (uv-left uv <uv>) <fl>
  (f32vector-ref uv 0))

(definition public inline (uv-top uv <uv>) <fl>
  (f32vector-ref uv 1))

(definition public inline (uv-right uv <uv>) <fl>
  (f32vector-ref uv 2))

(definition public inline (uv-bottom uv <uv>) <fl>
  (f32vector-ref uv 3))

(definition public inline (uv-depth uv <uv>) <fl>
  (f32vector-ref uv 4))


(definition public inline (uv-left-set! uv <uv> left <fl>) <void>
  (f32vector-set! uv 0 left))

(definition public inline (uv-top-set! uv <uv> top <fl>) <void>
  (f32vector-set! uv 1 top))

(definition public inline (uv-right-set! uv <uv> right <fl>) <void>
  (f32vector-set! uv 2 right))

(definition public inline (uv-bottom-set! uv <uv> bottom <fl>) <void>
  (f32vector-set! uv 3 bottom))

(definition public inline (uv-depth-set! uv <uv> depth <fl>) <void>
  (f32vector-set! uv 4 depth))


(definition public (uv=? c1 <uv> c2 <uv>) <bool>
  (and (= (uv-left c1) (uv-left c2))
       (= (uv-top c1) (uv-top c2))
       (= (uv-right c1) (uv-right c2))
       (= (uv-bottom c1) (uv-bottom c2))
       (= (uv-depth c1) (uv-depth c2))))


(definition public (uv! uv <uv> left <fl> top <fl> right <fl> bottom <fl> depth <fl>) <void>
  (uv-left-set! uv left)
  (uv-top-set! uv top)
  (uv-right-set! uv right)
  (uv-bottom-set! uv bottom)
  (uv-depth-set! uv depth))


(definition public (uv-copy! dst <uv> src <uv>) <void>
  (uv-left-set! dst (uv-left src))
  (uv-top-set! dst (uv-top src))
  (uv-right-set! dst (uv-right src))
  (uv-bottom-set! dst (uv-bottom src))
  (uv-depth-set! dst (uv-depth src))))
