;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Frame
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module gaea.window.frame jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.platform)
        (jazz.screen)
        (jazz.settings)
        (jazz.view)
        (jazz.window)
        (gaea.geometry)
        (gaea.opengl)
        (gaea.opengl.glew)
        (gaea.program)
        (gaea.shader)
        (gaea.texture)
        (gaea.window))


;;;
;;;; Interface
;;;


(definition interface-vert
  (string-append glsl-version
    #/C/
uniform mat4 projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
//#))


(definition interface-frag
  (string-append glsl-version
    #/C/
uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#))


(class Interface-Program extends Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self interface-vert)
    (set-fs self interface-frag)
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! textureCoord-attribute (add-attribute self "textureCoord"))
    (set! projMatrix-uniform (add-uniform self "projMatrix"))
    (set! textureSampler-uniform (add-uniform self "textureSampler")))
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (bind-uniforms self projection-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method package (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Array
;;;


(class Interface-Array extends Object
  
  
  (slot array getter generate)
  (slot vertex-buffer)
  
  
  (method override (initialize self program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (glBindVertexArray 0)))


;;;
;;;; Frame
;;;


(class Gaea-Frame extends Gaea-Window
  
  
  (slot interface-program   initialize #f getter generate)
  (slot interface-array     initialize #f getter generate)
  (slot interface-texture   initialize #f getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  
  (method protected virtual (default-render? self)
    #t)
  
  
  (method override (setup-engine self)
    (nextmethod self)
    (when (default-render? self)
      (create-programs self)
      (initialize-arrays self)
      (setup-textures self)))
  
  
  ;;;
  ;;;; Programs
  ;;;
  
  
  (method (create-programs self)
    (set! interface-program (new Interface-Program)))
  
  
  (method (release-programs self)
    (glDeleteProgram (get-program Interface-Program))
    (set! interface-program #f))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (initialize-arrays self)
    (set! interface-array (create-interface self)))
  
  
  (method (create-interface self)
    (let ((vertices #f32(  0.0 10.0 0.0 0.0 0.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0  0.0 0.0 1.0 1.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0)))
      (new Interface-Array interface-program vertices)))
  
  
  ;;;
  ;;;; Textures
  ;;;
  
  
  (method (setup-textures self)
    (set! interface-texture (make-cairo-texture (get-width self) (get-height self) scale?: #t)))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    (when (default-render? self)
      ;; Orthographic
      (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)
      ;; Textures
      (when interface-texture
        (close interface-texture)
        (setup-textures self))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  ;; helps with scaling artefacts that
  ;; the background be white and not black
  (method (clear-background self)
    (cond-expand
      (windows
       (glClearColor 1.0 1.0 1.0 1.0)
       (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)))
      (else)))
  
  
  ;; helps with scaling artefacts that
  ;; the background be white and not black
  (method (fill-background self surface)
    (cond-expand
      (windows
       (set-color surface {Color White})
       (paint surface))
      (else
       (clear surface))))

    
  (method (draw-interface self)
    (when (window-region-invalid? handle)
      (let ((surface (get-surface interface-texture))
            (rect (get-box (get-window-invalid-region handle))))
        (let ((clipper (fix-clipper rect)))
          (set-clipper surface clipper)
          (fill-background self surface)
          (paint-drawing-rect root surface rect '())
          (flush surface)
          (map-subtexture interface-texture clipper)
          (validate-window handle)))))
  
  
  (method public (render-interface self)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use interface-program)
    (bind-uniforms interface-program orthographic-matrix (get-id interface-texture))
    (glBindVertexArray (get-array interface-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms interface-program)
    (unuse interface-program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (when (default-render? self)
      ;; Interface
      (clear-background self)
      (draw-interface self)
      (render-interface self)))))
